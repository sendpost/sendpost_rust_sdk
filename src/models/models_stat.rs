/* 
 * SendPost API
 *
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ModelsStat {
  #[serde(rename = "clicked")]
  clicked: Option<i64>,
  #[serde(rename = "delivered")]
  delivered: Option<i64>,
  #[serde(rename = "dropped")]
  dropped: Option<i64>,
  #[serde(rename = "hardBounced")]
  hard_bounced: Option<i64>,
  #[serde(rename = "opened")]
  opened: Option<i64>,
  #[serde(rename = "processed")]
  processed: Option<i64>,
  #[serde(rename = "softBounced")]
  soft_bounced: Option<i64>,
  #[serde(rename = "spam")]
  spam: Option<i64>,
  #[serde(rename = "unsubscribed")]
  unsubscribed: Option<i64>
}

impl ModelsStat {
  pub fn new() -> ModelsStat {
    ModelsStat {
      clicked: None,
      delivered: None,
      dropped: None,
      hard_bounced: None,
      opened: None,
      processed: None,
      soft_bounced: None,
      spam: None,
      unsubscribed: None
    }
  }

  pub fn set_clicked(&mut self, clicked: i64) {
    self.clicked = Some(clicked);
  }

  pub fn with_clicked(mut self, clicked: i64) -> ModelsStat {
    self.clicked = Some(clicked);
    self
  }

  pub fn clicked(&self) -> Option<&i64> {
    self.clicked.as_ref()
  }

  pub fn reset_clicked(&mut self) {
    self.clicked = None;
  }

  pub fn set_delivered(&mut self, delivered: i64) {
    self.delivered = Some(delivered);
  }

  pub fn with_delivered(mut self, delivered: i64) -> ModelsStat {
    self.delivered = Some(delivered);
    self
  }

  pub fn delivered(&self) -> Option<&i64> {
    self.delivered.as_ref()
  }

  pub fn reset_delivered(&mut self) {
    self.delivered = None;
  }

  pub fn set_dropped(&mut self, dropped: i64) {
    self.dropped = Some(dropped);
  }

  pub fn with_dropped(mut self, dropped: i64) -> ModelsStat {
    self.dropped = Some(dropped);
    self
  }

  pub fn dropped(&self) -> Option<&i64> {
    self.dropped.as_ref()
  }

  pub fn reset_dropped(&mut self) {
    self.dropped = None;
  }

  pub fn set_hard_bounced(&mut self, hard_bounced: i64) {
    self.hard_bounced = Some(hard_bounced);
  }

  pub fn with_hard_bounced(mut self, hard_bounced: i64) -> ModelsStat {
    self.hard_bounced = Some(hard_bounced);
    self
  }

  pub fn hard_bounced(&self) -> Option<&i64> {
    self.hard_bounced.as_ref()
  }

  pub fn reset_hard_bounced(&mut self) {
    self.hard_bounced = None;
  }

  pub fn set_opened(&mut self, opened: i64) {
    self.opened = Some(opened);
  }

  pub fn with_opened(mut self, opened: i64) -> ModelsStat {
    self.opened = Some(opened);
    self
  }

  pub fn opened(&self) -> Option<&i64> {
    self.opened.as_ref()
  }

  pub fn reset_opened(&mut self) {
    self.opened = None;
  }

  pub fn set_processed(&mut self, processed: i64) {
    self.processed = Some(processed);
  }

  pub fn with_processed(mut self, processed: i64) -> ModelsStat {
    self.processed = Some(processed);
    self
  }

  pub fn processed(&self) -> Option<&i64> {
    self.processed.as_ref()
  }

  pub fn reset_processed(&mut self) {
    self.processed = None;
  }

  pub fn set_soft_bounced(&mut self, soft_bounced: i64) {
    self.soft_bounced = Some(soft_bounced);
  }

  pub fn with_soft_bounced(mut self, soft_bounced: i64) -> ModelsStat {
    self.soft_bounced = Some(soft_bounced);
    self
  }

  pub fn soft_bounced(&self) -> Option<&i64> {
    self.soft_bounced.as_ref()
  }

  pub fn reset_soft_bounced(&mut self) {
    self.soft_bounced = None;
  }

  pub fn set_spam(&mut self, spam: i64) {
    self.spam = Some(spam);
  }

  pub fn with_spam(mut self, spam: i64) -> ModelsStat {
    self.spam = Some(spam);
    self
  }

  pub fn spam(&self) -> Option<&i64> {
    self.spam.as_ref()
  }

  pub fn reset_spam(&mut self) {
    self.spam = None;
  }

  pub fn set_unsubscribed(&mut self, unsubscribed: i64) {
    self.unsubscribed = Some(unsubscribed);
  }

  pub fn with_unsubscribed(mut self, unsubscribed: i64) -> ModelsStat {
    self.unsubscribed = Some(unsubscribed);
    self
  }

  pub fn unsubscribed(&self) -> Option<&i64> {
    self.unsubscribed.as_ref()
  }

  pub fn reset_unsubscribed(&mut self) {
    self.unsubscribed = None;
  }

}



