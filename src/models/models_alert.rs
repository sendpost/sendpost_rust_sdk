/* 
 * SendPost API
 *
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ModelsAlert {
  #[serde(rename = "Condition")]
  condition: Option<String>,
  #[serde(rename = "Notification")]
  notification: Option<String>,
  #[serde(rename = "active")]
  active: Option<bool>,
  #[serde(rename = "alert_name")]
  alert_name: Option<String>,
  #[serde(rename = "created")]
  created: Option<i64>,
  #[serde(rename = "id")]
  id: Option<i64>,
  #[serde(rename = "label")]
  label: Option<::models::ModelsAlertLabel>,
  #[serde(rename = "member")]
  member: Option<::models::ModelsMember>,
  #[serde(rename = "priority")]
  priority: Option<::models::ModelsPriority>,
  #[serde(rename = "updated")]
  updated: Option<i64>
}

impl ModelsAlert {
  pub fn new() -> ModelsAlert {
    ModelsAlert {
      condition: None,
      notification: None,
      active: None,
      alert_name: None,
      created: None,
      id: None,
      label: None,
      member: None,
      priority: None,
      updated: None
    }
  }

  pub fn set_condition(&mut self, condition: String) {
    self.condition = Some(condition);
  }

  pub fn with_condition(mut self, condition: String) -> ModelsAlert {
    self.condition = Some(condition);
    self
  }

  pub fn condition(&self) -> Option<&String> {
    self.condition.as_ref()
  }

  pub fn reset_condition(&mut self) {
    self.condition = None;
  }

  pub fn set_notification(&mut self, notification: String) {
    self.notification = Some(notification);
  }

  pub fn with_notification(mut self, notification: String) -> ModelsAlert {
    self.notification = Some(notification);
    self
  }

  pub fn notification(&self) -> Option<&String> {
    self.notification.as_ref()
  }

  pub fn reset_notification(&mut self) {
    self.notification = None;
  }

  pub fn set_active(&mut self, active: bool) {
    self.active = Some(active);
  }

  pub fn with_active(mut self, active: bool) -> ModelsAlert {
    self.active = Some(active);
    self
  }

  pub fn active(&self) -> Option<&bool> {
    self.active.as_ref()
  }

  pub fn reset_active(&mut self) {
    self.active = None;
  }

  pub fn set_alert_name(&mut self, alert_name: String) {
    self.alert_name = Some(alert_name);
  }

  pub fn with_alert_name(mut self, alert_name: String) -> ModelsAlert {
    self.alert_name = Some(alert_name);
    self
  }

  pub fn alert_name(&self) -> Option<&String> {
    self.alert_name.as_ref()
  }

  pub fn reset_alert_name(&mut self) {
    self.alert_name = None;
  }

  pub fn set_created(&mut self, created: i64) {
    self.created = Some(created);
  }

  pub fn with_created(mut self, created: i64) -> ModelsAlert {
    self.created = Some(created);
    self
  }

  pub fn created(&self) -> Option<&i64> {
    self.created.as_ref()
  }

  pub fn reset_created(&mut self) {
    self.created = None;
  }

  pub fn set_id(&mut self, id: i64) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i64) -> ModelsAlert {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i64> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_label(&mut self, label: ::models::ModelsAlertLabel) {
    self.label = Some(label);
  }

  pub fn with_label(mut self, label: ::models::ModelsAlertLabel) -> ModelsAlert {
    self.label = Some(label);
    self
  }

  pub fn label(&self) -> Option<&::models::ModelsAlertLabel> {
    self.label.as_ref()
  }

  pub fn reset_label(&mut self) {
    self.label = None;
  }

  pub fn set_member(&mut self, member: ::models::ModelsMember) {
    self.member = Some(member);
  }

  pub fn with_member(mut self, member: ::models::ModelsMember) -> ModelsAlert {
    self.member = Some(member);
    self
  }

  pub fn member(&self) -> Option<&::models::ModelsMember> {
    self.member.as_ref()
  }

  pub fn reset_member(&mut self) {
    self.member = None;
  }

  pub fn set_priority(&mut self, priority: ::models::ModelsPriority) {
    self.priority = Some(priority);
  }

  pub fn with_priority(mut self, priority: ::models::ModelsPriority) -> ModelsAlert {
    self.priority = Some(priority);
    self
  }

  pub fn priority(&self) -> Option<&::models::ModelsPriority> {
    self.priority.as_ref()
  }

  pub fn reset_priority(&mut self) {
    self.priority = None;
  }

  pub fn set_updated(&mut self, updated: i64) {
    self.updated = Some(updated);
  }

  pub fn with_updated(mut self, updated: i64) -> ModelsAlert {
    self.updated = Some(updated);
    self
  }

  pub fn updated(&self) -> Option<&i64> {
    self.updated.as_ref()
  }

  pub fn reset_updated(&mut self) {
    self.updated = None;
  }

}



