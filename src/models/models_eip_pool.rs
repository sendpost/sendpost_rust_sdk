/* 
 * SendPost API
 *
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ModelsEipPool {
  #[serde(rename = "ips")]
  ips: Option<Vec<::models::ModelsEip>>,
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "routingMapping")]
  routing_mapping: Option<Value>,
  #[serde(rename = "routingStrategy")]
  routing_strategy: Option<i64>
}

impl ModelsEipPool {
  pub fn new() -> ModelsEipPool {
    ModelsEipPool {
      ips: None,
      name: None,
      routing_mapping: None,
      routing_strategy: None
    }
  }

  pub fn set_ips(&mut self, ips: Vec<::models::ModelsEip>) {
    self.ips = Some(ips);
  }

  pub fn with_ips(mut self, ips: Vec<::models::ModelsEip>) -> ModelsEipPool {
    self.ips = Some(ips);
    self
  }

  pub fn ips(&self) -> Option<&Vec<::models::ModelsEip>> {
    self.ips.as_ref()
  }

  pub fn reset_ips(&mut self) {
    self.ips = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> ModelsEipPool {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_routing_mapping(&mut self, routing_mapping: Value) {
    self.routing_mapping = Some(routing_mapping);
  }

  pub fn with_routing_mapping(mut self, routing_mapping: Value) -> ModelsEipPool {
    self.routing_mapping = Some(routing_mapping);
    self
  }

  pub fn routing_mapping(&self) -> Option<&Value> {
    self.routing_mapping.as_ref()
  }

  pub fn reset_routing_mapping(&mut self) {
    self.routing_mapping = None;
  }

  pub fn set_routing_strategy(&mut self, routing_strategy: i64) {
    self.routing_strategy = Some(routing_strategy);
  }

  pub fn with_routing_strategy(mut self, routing_strategy: i64) -> ModelsEipPool {
    self.routing_strategy = Some(routing_strategy);
    self
  }

  pub fn routing_strategy(&self) -> Option<&i64> {
    self.routing_strategy.as_ref()
  }

  pub fn reset_routing_strategy(&mut self) {
    self.routing_strategy = None;
  }

}



