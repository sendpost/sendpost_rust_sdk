/* 
 * SendPost API
 *
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ModelsGlockappsMonitorStat {
  #[serde(rename = "day")]
  day: Option<i64>,
  #[serde(rename = "listedCount")]
  listed_count: Option<i64>,
  #[serde(rename = "listedIn")]
  listed_in: Option<Vec<::models::ModelsGlockappsBlacklist>>,
  #[serde(rename = "month")]
  month: Option<i64>,
  #[serde(rename = "senderScore")]
  sender_score: Option<i64>,
  #[serde(rename = "year")]
  year: Option<i64>
}

impl ModelsGlockappsMonitorStat {
  pub fn new() -> ModelsGlockappsMonitorStat {
    ModelsGlockappsMonitorStat {
      day: None,
      listed_count: None,
      listed_in: None,
      month: None,
      sender_score: None,
      year: None
    }
  }

  pub fn set_day(&mut self, day: i64) {
    self.day = Some(day);
  }

  pub fn with_day(mut self, day: i64) -> ModelsGlockappsMonitorStat {
    self.day = Some(day);
    self
  }

  pub fn day(&self) -> Option<&i64> {
    self.day.as_ref()
  }

  pub fn reset_day(&mut self) {
    self.day = None;
  }

  pub fn set_listed_count(&mut self, listed_count: i64) {
    self.listed_count = Some(listed_count);
  }

  pub fn with_listed_count(mut self, listed_count: i64) -> ModelsGlockappsMonitorStat {
    self.listed_count = Some(listed_count);
    self
  }

  pub fn listed_count(&self) -> Option<&i64> {
    self.listed_count.as_ref()
  }

  pub fn reset_listed_count(&mut self) {
    self.listed_count = None;
  }

  pub fn set_listed_in(&mut self, listed_in: Vec<::models::ModelsGlockappsBlacklist>) {
    self.listed_in = Some(listed_in);
  }

  pub fn with_listed_in(mut self, listed_in: Vec<::models::ModelsGlockappsBlacklist>) -> ModelsGlockappsMonitorStat {
    self.listed_in = Some(listed_in);
    self
  }

  pub fn listed_in(&self) -> Option<&Vec<::models::ModelsGlockappsBlacklist>> {
    self.listed_in.as_ref()
  }

  pub fn reset_listed_in(&mut self) {
    self.listed_in = None;
  }

  pub fn set_month(&mut self, month: i64) {
    self.month = Some(month);
  }

  pub fn with_month(mut self, month: i64) -> ModelsGlockappsMonitorStat {
    self.month = Some(month);
    self
  }

  pub fn month(&self) -> Option<&i64> {
    self.month.as_ref()
  }

  pub fn reset_month(&mut self) {
    self.month = None;
  }

  pub fn set_sender_score(&mut self, sender_score: i64) {
    self.sender_score = Some(sender_score);
  }

  pub fn with_sender_score(mut self, sender_score: i64) -> ModelsGlockappsMonitorStat {
    self.sender_score = Some(sender_score);
    self
  }

  pub fn sender_score(&self) -> Option<&i64> {
    self.sender_score.as_ref()
  }

  pub fn reset_sender_score(&mut self) {
    self.sender_score = None;
  }

  pub fn set_year(&mut self, year: i64) {
    self.year = Some(year);
  }

  pub fn with_year(mut self, year: i64) -> ModelsGlockappsMonitorStat {
    self.year = Some(year);
    self
  }

  pub fn year(&self) -> Option<&i64> {
    self.year.as_ref()
  }

  pub fn reset_year(&mut self) {
    self.year = None;
  }

}



