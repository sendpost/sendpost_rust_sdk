/* 
 * SendPost API
 *
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ModelsSender {
  #[serde(rename = "created")]
  created: Option<i64>,
  #[serde(rename = "domain")]
  domain: Option<String>,
  #[serde(rename = "fromEmail")]
  from_email: Option<String>,
  #[serde(rename = "id")]
  id: Option<i64>,
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "replyToEmail")]
  reply_to_email: Option<String>,
  #[serde(rename = "verified")]
  verified: Option<bool>
}

impl ModelsSender {
  pub fn new() -> ModelsSender {
    ModelsSender {
      created: None,
      domain: None,
      from_email: None,
      id: None,
      name: None,
      reply_to_email: None,
      verified: None
    }
  }

  pub fn set_created(&mut self, created: i64) {
    self.created = Some(created);
  }

  pub fn with_created(mut self, created: i64) -> ModelsSender {
    self.created = Some(created);
    self
  }

  pub fn created(&self) -> Option<&i64> {
    self.created.as_ref()
  }

  pub fn reset_created(&mut self) {
    self.created = None;
  }

  pub fn set_domain(&mut self, domain: String) {
    self.domain = Some(domain);
  }

  pub fn with_domain(mut self, domain: String) -> ModelsSender {
    self.domain = Some(domain);
    self
  }

  pub fn domain(&self) -> Option<&String> {
    self.domain.as_ref()
  }

  pub fn reset_domain(&mut self) {
    self.domain = None;
  }

  pub fn set_from_email(&mut self, from_email: String) {
    self.from_email = Some(from_email);
  }

  pub fn with_from_email(mut self, from_email: String) -> ModelsSender {
    self.from_email = Some(from_email);
    self
  }

  pub fn from_email(&self) -> Option<&String> {
    self.from_email.as_ref()
  }

  pub fn reset_from_email(&mut self) {
    self.from_email = None;
  }

  pub fn set_id(&mut self, id: i64) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i64) -> ModelsSender {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i64> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> ModelsSender {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_reply_to_email(&mut self, reply_to_email: String) {
    self.reply_to_email = Some(reply_to_email);
  }

  pub fn with_reply_to_email(mut self, reply_to_email: String) -> ModelsSender {
    self.reply_to_email = Some(reply_to_email);
    self
  }

  pub fn reply_to_email(&self) -> Option<&String> {
    self.reply_to_email.as_ref()
  }

  pub fn reset_reply_to_email(&mut self) {
    self.reply_to_email = None;
  }

  pub fn set_verified(&mut self, verified: bool) {
    self.verified = Some(verified);
  }

  pub fn with_verified(mut self, verified: bool) -> ModelsSender {
    self.verified = Some(verified);
    self
  }

  pub fn verified(&self) -> Option<&bool> {
    self.verified.as_ref()
  }

  pub fn reset_verified(&mut self) {
    self.verified = None;
  }

}



