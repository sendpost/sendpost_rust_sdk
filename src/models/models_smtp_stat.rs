/* 
 * SendPost API
 *
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ModelsSmtpStat {
  #[serde(rename = "count")]
  count: Option<i64>,
  #[serde(rename = "smtpCode")]
  smtp_code: Option<i64>,
  #[serde(rename = "smtpDescription")]
  smtp_description: Option<String>
}

impl ModelsSmtpStat {
  pub fn new() -> ModelsSmtpStat {
    ModelsSmtpStat {
      count: None,
      smtp_code: None,
      smtp_description: None
    }
  }

  pub fn set_count(&mut self, count: i64) {
    self.count = Some(count);
  }

  pub fn with_count(mut self, count: i64) -> ModelsSmtpStat {
    self.count = Some(count);
    self
  }

  pub fn count(&self) -> Option<&i64> {
    self.count.as_ref()
  }

  pub fn reset_count(&mut self) {
    self.count = None;
  }

  pub fn set_smtp_code(&mut self, smtp_code: i64) {
    self.smtp_code = Some(smtp_code);
  }

  pub fn with_smtp_code(mut self, smtp_code: i64) -> ModelsSmtpStat {
    self.smtp_code = Some(smtp_code);
    self
  }

  pub fn smtp_code(&self) -> Option<&i64> {
    self.smtp_code.as_ref()
  }

  pub fn reset_smtp_code(&mut self) {
    self.smtp_code = None;
  }

  pub fn set_smtp_description(&mut self, smtp_description: String) {
    self.smtp_description = Some(smtp_description);
  }

  pub fn with_smtp_description(mut self, smtp_description: String) -> ModelsSmtpStat {
    self.smtp_description = Some(smtp_description);
    self
  }

  pub fn smtp_description(&self) -> Option<&String> {
    self.smtp_description.as_ref()
  }

  pub fn reset_smtp_description(&mut self) {
    self.smtp_description = None;
  }

}



