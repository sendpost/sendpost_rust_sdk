/* 
 * SendPost API
 *
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ModelsGlockappsBlacklist {
  #[serde(rename = "server")]
  server: Option<String>,
  #[serde(rename = "status")]
  status: Option<::models::ModelsBlacklistStatus>,
  #[serde(rename = "txt")]
  txt: Option<String>
}

impl ModelsGlockappsBlacklist {
  pub fn new() -> ModelsGlockappsBlacklist {
    ModelsGlockappsBlacklist {
      server: None,
      status: None,
      txt: None
    }
  }

  pub fn set_server(&mut self, server: String) {
    self.server = Some(server);
  }

  pub fn with_server(mut self, server: String) -> ModelsGlockappsBlacklist {
    self.server = Some(server);
    self
  }

  pub fn server(&self) -> Option<&String> {
    self.server.as_ref()
  }

  pub fn reset_server(&mut self) {
    self.server = None;
  }

  pub fn set_status(&mut self, status: ::models::ModelsBlacklistStatus) {
    self.status = Some(status);
  }

  pub fn with_status(mut self, status: ::models::ModelsBlacklistStatus) -> ModelsGlockappsBlacklist {
    self.status = Some(status);
    self
  }

  pub fn status(&self) -> Option<&::models::ModelsBlacklistStatus> {
    self.status.as_ref()
  }

  pub fn reset_status(&mut self) {
    self.status = None;
  }

  pub fn set_txt(&mut self, txt: String) {
    self.txt = Some(txt);
  }

  pub fn with_txt(mut self, txt: String) -> ModelsGlockappsBlacklist {
    self.txt = Some(txt);
    self
  }

  pub fn txt(&self) -> Option<&String> {
    self.txt.as_ref()
  }

  pub fn reset_txt(&mut self) {
    self.txt = None;
  }

}



