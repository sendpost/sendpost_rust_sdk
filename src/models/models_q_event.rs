/* 
 * SendPost API
 *
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ModelsQEvent {
  #[serde(rename = "accountID")]
  account_id: Option<i64>,
  #[serde(rename = "eventID")]
  event_id: Option<String>,
  #[serde(rename = "eventMetadata")]
  event_metadata: Option<::models::ModelsEventMetadata>,
  #[serde(rename = "from")]
  from: Option<String>,
  #[serde(rename = "groups")]
  groups: Option<Value>,
  #[serde(rename = "ipID")]
  ip_id: Option<i64>,
  #[serde(rename = "messageID")]
  message_id: Option<String>,
  #[serde(rename = "messageType")]
  message_type: Option<String>,
  #[serde(rename = "subAccountID")]
  sub_account_id: Option<i64>,
  #[serde(rename = "submittedAt")]
  submitted_at: Option<i64>,
  #[serde(rename = "to")]
  to: Option<String>,
  #[serde(rename = "type")]
  _type: Option<i64>
}

impl ModelsQEvent {
  pub fn new() -> ModelsQEvent {
    ModelsQEvent {
      account_id: None,
      event_id: None,
      event_metadata: None,
      from: None,
      groups: None,
      ip_id: None,
      message_id: None,
      message_type: None,
      sub_account_id: None,
      submitted_at: None,
      to: None,
      _type: None
    }
  }

  pub fn set_account_id(&mut self, account_id: i64) {
    self.account_id = Some(account_id);
  }

  pub fn with_account_id(mut self, account_id: i64) -> ModelsQEvent {
    self.account_id = Some(account_id);
    self
  }

  pub fn account_id(&self) -> Option<&i64> {
    self.account_id.as_ref()
  }

  pub fn reset_account_id(&mut self) {
    self.account_id = None;
  }

  pub fn set_event_id(&mut self, event_id: String) {
    self.event_id = Some(event_id);
  }

  pub fn with_event_id(mut self, event_id: String) -> ModelsQEvent {
    self.event_id = Some(event_id);
    self
  }

  pub fn event_id(&self) -> Option<&String> {
    self.event_id.as_ref()
  }

  pub fn reset_event_id(&mut self) {
    self.event_id = None;
  }

  pub fn set_event_metadata(&mut self, event_metadata: ::models::ModelsEventMetadata) {
    self.event_metadata = Some(event_metadata);
  }

  pub fn with_event_metadata(mut self, event_metadata: ::models::ModelsEventMetadata) -> ModelsQEvent {
    self.event_metadata = Some(event_metadata);
    self
  }

  pub fn event_metadata(&self) -> Option<&::models::ModelsEventMetadata> {
    self.event_metadata.as_ref()
  }

  pub fn reset_event_metadata(&mut self) {
    self.event_metadata = None;
  }

  pub fn set_from(&mut self, from: String) {
    self.from = Some(from);
  }

  pub fn with_from(mut self, from: String) -> ModelsQEvent {
    self.from = Some(from);
    self
  }

  pub fn from(&self) -> Option<&String> {
    self.from.as_ref()
  }

  pub fn reset_from(&mut self) {
    self.from = None;
  }

  pub fn set_groups(&mut self, groups: Value) {
    self.groups = Some(groups);
  }

  pub fn with_groups(mut self, groups: Value) -> ModelsQEvent {
    self.groups = Some(groups);
    self
  }

  pub fn groups(&self) -> Option<&Value> {
    self.groups.as_ref()
  }

  pub fn reset_groups(&mut self) {
    self.groups = None;
  }

  pub fn set_ip_id(&mut self, ip_id: i64) {
    self.ip_id = Some(ip_id);
  }

  pub fn with_ip_id(mut self, ip_id: i64) -> ModelsQEvent {
    self.ip_id = Some(ip_id);
    self
  }

  pub fn ip_id(&self) -> Option<&i64> {
    self.ip_id.as_ref()
  }

  pub fn reset_ip_id(&mut self) {
    self.ip_id = None;
  }

  pub fn set_message_id(&mut self, message_id: String) {
    self.message_id = Some(message_id);
  }

  pub fn with_message_id(mut self, message_id: String) -> ModelsQEvent {
    self.message_id = Some(message_id);
    self
  }

  pub fn message_id(&self) -> Option<&String> {
    self.message_id.as_ref()
  }

  pub fn reset_message_id(&mut self) {
    self.message_id = None;
  }

  pub fn set_message_type(&mut self, message_type: String) {
    self.message_type = Some(message_type);
  }

  pub fn with_message_type(mut self, message_type: String) -> ModelsQEvent {
    self.message_type = Some(message_type);
    self
  }

  pub fn message_type(&self) -> Option<&String> {
    self.message_type.as_ref()
  }

  pub fn reset_message_type(&mut self) {
    self.message_type = None;
  }

  pub fn set_sub_account_id(&mut self, sub_account_id: i64) {
    self.sub_account_id = Some(sub_account_id);
  }

  pub fn with_sub_account_id(mut self, sub_account_id: i64) -> ModelsQEvent {
    self.sub_account_id = Some(sub_account_id);
    self
  }

  pub fn sub_account_id(&self) -> Option<&i64> {
    self.sub_account_id.as_ref()
  }

  pub fn reset_sub_account_id(&mut self) {
    self.sub_account_id = None;
  }

  pub fn set_submitted_at(&mut self, submitted_at: i64) {
    self.submitted_at = Some(submitted_at);
  }

  pub fn with_submitted_at(mut self, submitted_at: i64) -> ModelsQEvent {
    self.submitted_at = Some(submitted_at);
    self
  }

  pub fn submitted_at(&self) -> Option<&i64> {
    self.submitted_at.as_ref()
  }

  pub fn reset_submitted_at(&mut self) {
    self.submitted_at = None;
  }

  pub fn set_to(&mut self, to: String) {
    self.to = Some(to);
  }

  pub fn with_to(mut self, to: String) -> ModelsQEvent {
    self.to = Some(to);
    self
  }

  pub fn to(&self) -> Option<&String> {
    self.to.as_ref()
  }

  pub fn reset_to(&mut self) {
    self.to = None;
  }

  pub fn set__type(&mut self, _type: i64) {
    self._type = Some(_type);
  }

  pub fn with__type(mut self, _type: i64) -> ModelsQEvent {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> Option<&i64> {
    self._type.as_ref()
  }

  pub fn reset__type(&mut self) {
    self._type = None;
  }

}



