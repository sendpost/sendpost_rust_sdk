/* 
 * SendPost API
 *
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ModelsDnsRecord {
  #[serde(rename = "host")]
  host: Option<String>,
  #[serde(rename = "textValue")]
  text_value: Option<String>,
  #[serde(rename = "type")]
  _type: Option<String>
}

impl ModelsDnsRecord {
  pub fn new() -> ModelsDnsRecord {
    ModelsDnsRecord {
      host: None,
      text_value: None,
      _type: None
    }
  }

  pub fn set_host(&mut self, host: String) {
    self.host = Some(host);
  }

  pub fn with_host(mut self, host: String) -> ModelsDnsRecord {
    self.host = Some(host);
    self
  }

  pub fn host(&self) -> Option<&String> {
    self.host.as_ref()
  }

  pub fn reset_host(&mut self) {
    self.host = None;
  }

  pub fn set_text_value(&mut self, text_value: String) {
    self.text_value = Some(text_value);
  }

  pub fn with_text_value(mut self, text_value: String) -> ModelsDnsRecord {
    self.text_value = Some(text_value);
    self
  }

  pub fn text_value(&self) -> Option<&String> {
    self.text_value.as_ref()
  }

  pub fn reset_text_value(&mut self) {
    self.text_value = None;
  }

  pub fn set__type(&mut self, _type: String) {
    self._type = Some(_type);
  }

  pub fn with__type(mut self, _type: String) -> ModelsDnsRecord {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> Option<&String> {
    self._type.as_ref()
  }

  pub fn reset__type(&mut self) {
    self._type = None;
  }

}



