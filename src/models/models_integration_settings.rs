/* 
 * SendPost API
 *
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ModelsIntegrationSettings {
  #[serde(rename = "autoEnableMonitoring")]
  auto_enable_monitoring: Option<bool>,
  #[serde(rename = "emailTo")]
  email_to: Option<Vec<String>>,
  #[serde(rename = "frequency")]
  frequency: Option<::models::ModelsFrequencyType>,
  #[serde(rename = "receiveReports")]
  receive_reports: Option<bool>
}

impl ModelsIntegrationSettings {
  pub fn new() -> ModelsIntegrationSettings {
    ModelsIntegrationSettings {
      auto_enable_monitoring: None,
      email_to: None,
      frequency: None,
      receive_reports: None
    }
  }

  pub fn set_auto_enable_monitoring(&mut self, auto_enable_monitoring: bool) {
    self.auto_enable_monitoring = Some(auto_enable_monitoring);
  }

  pub fn with_auto_enable_monitoring(mut self, auto_enable_monitoring: bool) -> ModelsIntegrationSettings {
    self.auto_enable_monitoring = Some(auto_enable_monitoring);
    self
  }

  pub fn auto_enable_monitoring(&self) -> Option<&bool> {
    self.auto_enable_monitoring.as_ref()
  }

  pub fn reset_auto_enable_monitoring(&mut self) {
    self.auto_enable_monitoring = None;
  }

  pub fn set_email_to(&mut self, email_to: Vec<String>) {
    self.email_to = Some(email_to);
  }

  pub fn with_email_to(mut self, email_to: Vec<String>) -> ModelsIntegrationSettings {
    self.email_to = Some(email_to);
    self
  }

  pub fn email_to(&self) -> Option<&Vec<String>> {
    self.email_to.as_ref()
  }

  pub fn reset_email_to(&mut self) {
    self.email_to = None;
  }

  pub fn set_frequency(&mut self, frequency: ::models::ModelsFrequencyType) {
    self.frequency = Some(frequency);
  }

  pub fn with_frequency(mut self, frequency: ::models::ModelsFrequencyType) -> ModelsIntegrationSettings {
    self.frequency = Some(frequency);
    self
  }

  pub fn frequency(&self) -> Option<&::models::ModelsFrequencyType> {
    self.frequency.as_ref()
  }

  pub fn reset_frequency(&mut self) {
    self.frequency = None;
  }

  pub fn set_receive_reports(&mut self, receive_reports: bool) {
    self.receive_reports = Some(receive_reports);
  }

  pub fn with_receive_reports(mut self, receive_reports: bool) -> ModelsIntegrationSettings {
    self.receive_reports = Some(receive_reports);
    self
  }

  pub fn receive_reports(&self) -> Option<&bool> {
    self.receive_reports.as_ref()
  }

  pub fn reset_receive_reports(&mut self) {
    self.receive_reports = None;
  }

}



