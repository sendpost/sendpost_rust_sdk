/* 
 * SendPost API
 *
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ModelsIpPool {
  #[serde(rename = "created")]
  created: Option<i64>,
  #[serde(rename = "id")]
  id: Option<i64>,
  #[serde(rename = "ips")]
  ips: Option<Vec<::models::ModelsIp>>,
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "routingMetaData")]
  routing_meta_data: Option<String>,
  #[serde(rename = "routingStrategy")]
  routing_strategy: Option<i64>,
  #[serde(rename = "type")]
  _type: Option<::models::ModelsIpPoolType>
}

impl ModelsIpPool {
  pub fn new() -> ModelsIpPool {
    ModelsIpPool {
      created: None,
      id: None,
      ips: None,
      name: None,
      routing_meta_data: None,
      routing_strategy: None,
      _type: None
    }
  }

  pub fn set_created(&mut self, created: i64) {
    self.created = Some(created);
  }

  pub fn with_created(mut self, created: i64) -> ModelsIpPool {
    self.created = Some(created);
    self
  }

  pub fn created(&self) -> Option<&i64> {
    self.created.as_ref()
  }

  pub fn reset_created(&mut self) {
    self.created = None;
  }

  pub fn set_id(&mut self, id: i64) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i64) -> ModelsIpPool {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i64> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_ips(&mut self, ips: Vec<::models::ModelsIp>) {
    self.ips = Some(ips);
  }

  pub fn with_ips(mut self, ips: Vec<::models::ModelsIp>) -> ModelsIpPool {
    self.ips = Some(ips);
    self
  }

  pub fn ips(&self) -> Option<&Vec<::models::ModelsIp>> {
    self.ips.as_ref()
  }

  pub fn reset_ips(&mut self) {
    self.ips = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> ModelsIpPool {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_routing_meta_data(&mut self, routing_meta_data: String) {
    self.routing_meta_data = Some(routing_meta_data);
  }

  pub fn with_routing_meta_data(mut self, routing_meta_data: String) -> ModelsIpPool {
    self.routing_meta_data = Some(routing_meta_data);
    self
  }

  pub fn routing_meta_data(&self) -> Option<&String> {
    self.routing_meta_data.as_ref()
  }

  pub fn reset_routing_meta_data(&mut self) {
    self.routing_meta_data = None;
  }

  pub fn set_routing_strategy(&mut self, routing_strategy: i64) {
    self.routing_strategy = Some(routing_strategy);
  }

  pub fn with_routing_strategy(mut self, routing_strategy: i64) -> ModelsIpPool {
    self.routing_strategy = Some(routing_strategy);
    self
  }

  pub fn routing_strategy(&self) -> Option<&i64> {
    self.routing_strategy.as_ref()
  }

  pub fn reset_routing_strategy(&mut self) {
    self.routing_strategy = None;
  }

  pub fn set__type(&mut self, _type: ::models::ModelsIpPoolType) {
    self._type = Some(_type);
  }

  pub fn with__type(mut self, _type: ::models::ModelsIpPoolType) -> ModelsIpPool {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> Option<&::models::ModelsIpPoolType> {
    self._type.as_ref()
  }

  pub fn reset__type(&mut self) {
    self._type = None;
  }

}



