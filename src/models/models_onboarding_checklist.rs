/* 
 * SendPost API
 *
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ModelsOnboardingChecklist {
  #[serde(rename = "id")]
  id: Option<i64>,
  #[serde(rename = "isDomainAdded")]
  is_domain_added: Option<bool>,
  #[serde(rename = "isDomainVerified")]
  is_domain_verified: Option<bool>,
  #[serde(rename = "isFirstEmailSent")]
  is_first_email_sent: Option<bool>
}

impl ModelsOnboardingChecklist {
  pub fn new() -> ModelsOnboardingChecklist {
    ModelsOnboardingChecklist {
      id: None,
      is_domain_added: None,
      is_domain_verified: None,
      is_first_email_sent: None
    }
  }

  pub fn set_id(&mut self, id: i64) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i64) -> ModelsOnboardingChecklist {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i64> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_is_domain_added(&mut self, is_domain_added: bool) {
    self.is_domain_added = Some(is_domain_added);
  }

  pub fn with_is_domain_added(mut self, is_domain_added: bool) -> ModelsOnboardingChecklist {
    self.is_domain_added = Some(is_domain_added);
    self
  }

  pub fn is_domain_added(&self) -> Option<&bool> {
    self.is_domain_added.as_ref()
  }

  pub fn reset_is_domain_added(&mut self) {
    self.is_domain_added = None;
  }

  pub fn set_is_domain_verified(&mut self, is_domain_verified: bool) {
    self.is_domain_verified = Some(is_domain_verified);
  }

  pub fn with_is_domain_verified(mut self, is_domain_verified: bool) -> ModelsOnboardingChecklist {
    self.is_domain_verified = Some(is_domain_verified);
    self
  }

  pub fn is_domain_verified(&self) -> Option<&bool> {
    self.is_domain_verified.as_ref()
  }

  pub fn reset_is_domain_verified(&mut self) {
    self.is_domain_verified = None;
  }

  pub fn set_is_first_email_sent(&mut self, is_first_email_sent: bool) {
    self.is_first_email_sent = Some(is_first_email_sent);
  }

  pub fn with_is_first_email_sent(mut self, is_first_email_sent: bool) -> ModelsOnboardingChecklist {
    self.is_first_email_sent = Some(is_first_email_sent);
    self
  }

  pub fn is_first_email_sent(&self) -> Option<&bool> {
    self.is_first_email_sent.as_ref()
  }

  pub fn reset_is_first_email_sent(&mut self) {
    self.is_first_email_sent = None;
  }

}



