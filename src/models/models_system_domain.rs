/* 
 * SendPost API
 *
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ModelsSystemDomain {
  #[serde(rename = "created")]
  created: Option<i64>,
  #[serde(rename = "dkim")]
  dkim: Option<::models::ModelsSystemDnsRecord>,
  #[serde(rename = "dkimConfig")]
  dkim_config: Option<String>,
  #[serde(rename = "dkimVerified")]
  dkim_verified: Option<bool>,
  #[serde(rename = "id")]
  id: Option<i64>,
  #[serde(rename = "mailboxVerified")]
  mailbox_verified: Option<bool>,
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "spf")]
  spf: Option<::models::ModelsSystemDnsRecord>,
  #[serde(rename = "spfVerified")]
  spf_verified: Option<bool>,
  #[serde(rename = "track")]
  track: Option<::models::ModelsSystemDnsRecord>,
  #[serde(rename = "trackVerified")]
  track_verified: Option<bool>
}

impl ModelsSystemDomain {
  pub fn new() -> ModelsSystemDomain {
    ModelsSystemDomain {
      created: None,
      dkim: None,
      dkim_config: None,
      dkim_verified: None,
      id: None,
      mailbox_verified: None,
      name: None,
      spf: None,
      spf_verified: None,
      track: None,
      track_verified: None
    }
  }

  pub fn set_created(&mut self, created: i64) {
    self.created = Some(created);
  }

  pub fn with_created(mut self, created: i64) -> ModelsSystemDomain {
    self.created = Some(created);
    self
  }

  pub fn created(&self) -> Option<&i64> {
    self.created.as_ref()
  }

  pub fn reset_created(&mut self) {
    self.created = None;
  }

  pub fn set_dkim(&mut self, dkim: ::models::ModelsSystemDnsRecord) {
    self.dkim = Some(dkim);
  }

  pub fn with_dkim(mut self, dkim: ::models::ModelsSystemDnsRecord) -> ModelsSystemDomain {
    self.dkim = Some(dkim);
    self
  }

  pub fn dkim(&self) -> Option<&::models::ModelsSystemDnsRecord> {
    self.dkim.as_ref()
  }

  pub fn reset_dkim(&mut self) {
    self.dkim = None;
  }

  pub fn set_dkim_config(&mut self, dkim_config: String) {
    self.dkim_config = Some(dkim_config);
  }

  pub fn with_dkim_config(mut self, dkim_config: String) -> ModelsSystemDomain {
    self.dkim_config = Some(dkim_config);
    self
  }

  pub fn dkim_config(&self) -> Option<&String> {
    self.dkim_config.as_ref()
  }

  pub fn reset_dkim_config(&mut self) {
    self.dkim_config = None;
  }

  pub fn set_dkim_verified(&mut self, dkim_verified: bool) {
    self.dkim_verified = Some(dkim_verified);
  }

  pub fn with_dkim_verified(mut self, dkim_verified: bool) -> ModelsSystemDomain {
    self.dkim_verified = Some(dkim_verified);
    self
  }

  pub fn dkim_verified(&self) -> Option<&bool> {
    self.dkim_verified.as_ref()
  }

  pub fn reset_dkim_verified(&mut self) {
    self.dkim_verified = None;
  }

  pub fn set_id(&mut self, id: i64) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i64) -> ModelsSystemDomain {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i64> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_mailbox_verified(&mut self, mailbox_verified: bool) {
    self.mailbox_verified = Some(mailbox_verified);
  }

  pub fn with_mailbox_verified(mut self, mailbox_verified: bool) -> ModelsSystemDomain {
    self.mailbox_verified = Some(mailbox_verified);
    self
  }

  pub fn mailbox_verified(&self) -> Option<&bool> {
    self.mailbox_verified.as_ref()
  }

  pub fn reset_mailbox_verified(&mut self) {
    self.mailbox_verified = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> ModelsSystemDomain {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_spf(&mut self, spf: ::models::ModelsSystemDnsRecord) {
    self.spf = Some(spf);
  }

  pub fn with_spf(mut self, spf: ::models::ModelsSystemDnsRecord) -> ModelsSystemDomain {
    self.spf = Some(spf);
    self
  }

  pub fn spf(&self) -> Option<&::models::ModelsSystemDnsRecord> {
    self.spf.as_ref()
  }

  pub fn reset_spf(&mut self) {
    self.spf = None;
  }

  pub fn set_spf_verified(&mut self, spf_verified: bool) {
    self.spf_verified = Some(spf_verified);
  }

  pub fn with_spf_verified(mut self, spf_verified: bool) -> ModelsSystemDomain {
    self.spf_verified = Some(spf_verified);
    self
  }

  pub fn spf_verified(&self) -> Option<&bool> {
    self.spf_verified.as_ref()
  }

  pub fn reset_spf_verified(&mut self) {
    self.spf_verified = None;
  }

  pub fn set_track(&mut self, track: ::models::ModelsSystemDnsRecord) {
    self.track = Some(track);
  }

  pub fn with_track(mut self, track: ::models::ModelsSystemDnsRecord) -> ModelsSystemDomain {
    self.track = Some(track);
    self
  }

  pub fn track(&self) -> Option<&::models::ModelsSystemDnsRecord> {
    self.track.as_ref()
  }

  pub fn reset_track(&mut self) {
    self.track = None;
  }

  pub fn set_track_verified(&mut self, track_verified: bool) {
    self.track_verified = Some(track_verified);
  }

  pub fn with_track_verified(mut self, track_verified: bool) -> ModelsSystemDomain {
    self.track_verified = Some(track_verified);
    self
  }

  pub fn track_verified(&self) -> Option<&bool> {
    self.track_verified.as_ref()
  }

  pub fn reset_track_verified(&mut self) {
    self.track_verified = None;
  }

}



