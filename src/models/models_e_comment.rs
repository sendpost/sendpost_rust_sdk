/* 
 * SendPost API
 *
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ModelsEComment {
  #[serde(rename = "author")]
  author: Option<::models::ModelsIeMember>,
  #[serde(rename = "content")]
  content: Option<String>
}

impl ModelsEComment {
  pub fn new() -> ModelsEComment {
    ModelsEComment {
      author: None,
      content: None
    }
  }

  pub fn set_author(&mut self, author: ::models::ModelsIeMember) {
    self.author = Some(author);
  }

  pub fn with_author(mut self, author: ::models::ModelsIeMember) -> ModelsEComment {
    self.author = Some(author);
    self
  }

  pub fn author(&self) -> Option<&::models::ModelsIeMember> {
    self.author.as_ref()
  }

  pub fn reset_author(&mut self) {
    self.author = None;
  }

  pub fn set_content(&mut self, content: String) {
    self.content = Some(content);
  }

  pub fn with_content(mut self, content: String) -> ModelsEComment {
    self.content = Some(content);
    self
  }

  pub fn content(&self) -> Option<&String> {
    self.content.as_ref()
  }

  pub fn reset_content(&mut self) {
    self.content = None;
  }

}



