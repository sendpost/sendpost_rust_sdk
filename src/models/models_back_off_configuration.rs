/* 
 * SendPost API
 *
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ModelsBackOffConfiguration {
  #[serde(rename = "concurrentConnections")]
  concurrent_connections: Option<i64>,
  #[serde(rename = "concurrentConnectionsType")]
  concurrent_connections_type: Option<::models::ModelsBackOffDecreaseType>,
  #[serde(rename = "sendPerDay")]
  send_per_day: Option<i64>,
  #[serde(rename = "sendPerDayType")]
  send_per_day_type: Option<::models::ModelsBackOffDecreaseType>,
  #[serde(rename = "sendPerHour")]
  send_per_hour: Option<i64>,
  #[serde(rename = "sendPerHourType")]
  send_per_hour_type: Option<::models::ModelsBackOffDecreaseType>,
  #[serde(rename = "sendPerMinute")]
  send_per_minute: Option<i64>,
  #[serde(rename = "sendPerMinuteType")]
  send_per_minute_type: Option<::models::ModelsBackOffDecreaseType>
}

impl ModelsBackOffConfiguration {
  pub fn new() -> ModelsBackOffConfiguration {
    ModelsBackOffConfiguration {
      concurrent_connections: None,
      concurrent_connections_type: None,
      send_per_day: None,
      send_per_day_type: None,
      send_per_hour: None,
      send_per_hour_type: None,
      send_per_minute: None,
      send_per_minute_type: None
    }
  }

  pub fn set_concurrent_connections(&mut self, concurrent_connections: i64) {
    self.concurrent_connections = Some(concurrent_connections);
  }

  pub fn with_concurrent_connections(mut self, concurrent_connections: i64) -> ModelsBackOffConfiguration {
    self.concurrent_connections = Some(concurrent_connections);
    self
  }

  pub fn concurrent_connections(&self) -> Option<&i64> {
    self.concurrent_connections.as_ref()
  }

  pub fn reset_concurrent_connections(&mut self) {
    self.concurrent_connections = None;
  }

  pub fn set_concurrent_connections_type(&mut self, concurrent_connections_type: ::models::ModelsBackOffDecreaseType) {
    self.concurrent_connections_type = Some(concurrent_connections_type);
  }

  pub fn with_concurrent_connections_type(mut self, concurrent_connections_type: ::models::ModelsBackOffDecreaseType) -> ModelsBackOffConfiguration {
    self.concurrent_connections_type = Some(concurrent_connections_type);
    self
  }

  pub fn concurrent_connections_type(&self) -> Option<&::models::ModelsBackOffDecreaseType> {
    self.concurrent_connections_type.as_ref()
  }

  pub fn reset_concurrent_connections_type(&mut self) {
    self.concurrent_connections_type = None;
  }

  pub fn set_send_per_day(&mut self, send_per_day: i64) {
    self.send_per_day = Some(send_per_day);
  }

  pub fn with_send_per_day(mut self, send_per_day: i64) -> ModelsBackOffConfiguration {
    self.send_per_day = Some(send_per_day);
    self
  }

  pub fn send_per_day(&self) -> Option<&i64> {
    self.send_per_day.as_ref()
  }

  pub fn reset_send_per_day(&mut self) {
    self.send_per_day = None;
  }

  pub fn set_send_per_day_type(&mut self, send_per_day_type: ::models::ModelsBackOffDecreaseType) {
    self.send_per_day_type = Some(send_per_day_type);
  }

  pub fn with_send_per_day_type(mut self, send_per_day_type: ::models::ModelsBackOffDecreaseType) -> ModelsBackOffConfiguration {
    self.send_per_day_type = Some(send_per_day_type);
    self
  }

  pub fn send_per_day_type(&self) -> Option<&::models::ModelsBackOffDecreaseType> {
    self.send_per_day_type.as_ref()
  }

  pub fn reset_send_per_day_type(&mut self) {
    self.send_per_day_type = None;
  }

  pub fn set_send_per_hour(&mut self, send_per_hour: i64) {
    self.send_per_hour = Some(send_per_hour);
  }

  pub fn with_send_per_hour(mut self, send_per_hour: i64) -> ModelsBackOffConfiguration {
    self.send_per_hour = Some(send_per_hour);
    self
  }

  pub fn send_per_hour(&self) -> Option<&i64> {
    self.send_per_hour.as_ref()
  }

  pub fn reset_send_per_hour(&mut self) {
    self.send_per_hour = None;
  }

  pub fn set_send_per_hour_type(&mut self, send_per_hour_type: ::models::ModelsBackOffDecreaseType) {
    self.send_per_hour_type = Some(send_per_hour_type);
  }

  pub fn with_send_per_hour_type(mut self, send_per_hour_type: ::models::ModelsBackOffDecreaseType) -> ModelsBackOffConfiguration {
    self.send_per_hour_type = Some(send_per_hour_type);
    self
  }

  pub fn send_per_hour_type(&self) -> Option<&::models::ModelsBackOffDecreaseType> {
    self.send_per_hour_type.as_ref()
  }

  pub fn reset_send_per_hour_type(&mut self) {
    self.send_per_hour_type = None;
  }

  pub fn set_send_per_minute(&mut self, send_per_minute: i64) {
    self.send_per_minute = Some(send_per_minute);
  }

  pub fn with_send_per_minute(mut self, send_per_minute: i64) -> ModelsBackOffConfiguration {
    self.send_per_minute = Some(send_per_minute);
    self
  }

  pub fn send_per_minute(&self) -> Option<&i64> {
    self.send_per_minute.as_ref()
  }

  pub fn reset_send_per_minute(&mut self) {
    self.send_per_minute = None;
  }

  pub fn set_send_per_minute_type(&mut self, send_per_minute_type: ::models::ModelsBackOffDecreaseType) {
    self.send_per_minute_type = Some(send_per_minute_type);
  }

  pub fn with_send_per_minute_type(mut self, send_per_minute_type: ::models::ModelsBackOffDecreaseType) -> ModelsBackOffConfiguration {
    self.send_per_minute_type = Some(send_per_minute_type);
    self
  }

  pub fn send_per_minute_type(&self) -> Option<&::models::ModelsBackOffDecreaseType> {
    self.send_per_minute_type.as_ref()
  }

  pub fn reset_send_per_minute_type(&mut self) {
    self.send_per_minute_type = None;
  }

}



