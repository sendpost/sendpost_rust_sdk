/* 
 * SendPost API
 *
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ModelsEIntegration {
  #[serde(rename = "key")]
  key: Option<String>,
  #[serde(rename = "settings")]
  settings: Option<::models::ModelsIntegrationSettings>
}

impl ModelsEIntegration {
  pub fn new() -> ModelsEIntegration {
    ModelsEIntegration {
      key: None,
      settings: None
    }
  }

  pub fn set_key(&mut self, key: String) {
    self.key = Some(key);
  }

  pub fn with_key(mut self, key: String) -> ModelsEIntegration {
    self.key = Some(key);
    self
  }

  pub fn key(&self) -> Option<&String> {
    self.key.as_ref()
  }

  pub fn reset_key(&mut self) {
    self.key = None;
  }

  pub fn set_settings(&mut self, settings: ::models::ModelsIntegrationSettings) {
    self.settings = Some(settings);
  }

  pub fn with_settings(mut self, settings: ::models::ModelsIntegrationSettings) -> ModelsEIntegration {
    self.settings = Some(settings);
    self
  }

  pub fn settings(&self) -> Option<&::models::ModelsIntegrationSettings> {
    self.settings.as_ref()
  }

  pub fn reset_settings(&mut self) {
    self.settings = None;
  }

}



