/* 
 * SendPost API
 *
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ModelsAuthInfo {
  #[serde(rename = "Accounts")]
  accounts: Option<Vec<::models::ModelsAccount>>,
  #[serde(rename = "Member")]
  member: Option<::models::ModelsMember>
}

impl ModelsAuthInfo {
  pub fn new() -> ModelsAuthInfo {
    ModelsAuthInfo {
      accounts: None,
      member: None
    }
  }

  pub fn set_accounts(&mut self, accounts: Vec<::models::ModelsAccount>) {
    self.accounts = Some(accounts);
  }

  pub fn with_accounts(mut self, accounts: Vec<::models::ModelsAccount>) -> ModelsAuthInfo {
    self.accounts = Some(accounts);
    self
  }

  pub fn accounts(&self) -> Option<&Vec<::models::ModelsAccount>> {
    self.accounts.as_ref()
  }

  pub fn reset_accounts(&mut self) {
    self.accounts = None;
  }

  pub fn set_member(&mut self, member: ::models::ModelsMember) {
    self.member = Some(member);
  }

  pub fn with_member(mut self, member: ::models::ModelsMember) -> ModelsAuthInfo {
    self.member = Some(member);
    self
  }

  pub fn member(&self) -> Option<&::models::ModelsMember> {
    self.member.as_ref()
  }

  pub fn reset_member(&mut self) {
    self.member = None;
  }

}



