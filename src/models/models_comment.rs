/* 
 * SendPost API
 *
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ModelsComment {
  #[serde(rename = "author")]
  author: Option<::models::ModelsMember>,
  #[serde(rename = "content")]
  content: Option<String>,
  #[serde(rename = "created")]
  created: Option<i64>,
  #[serde(rename = "id")]
  id: Option<i64>,
  #[serde(rename = "incident")]
  incident: Option<::models::ModelsIncident>
}

impl ModelsComment {
  pub fn new() -> ModelsComment {
    ModelsComment {
      author: None,
      content: None,
      created: None,
      id: None,
      incident: None
    }
  }

  pub fn set_author(&mut self, author: ::models::ModelsMember) {
    self.author = Some(author);
  }

  pub fn with_author(mut self, author: ::models::ModelsMember) -> ModelsComment {
    self.author = Some(author);
    self
  }

  pub fn author(&self) -> Option<&::models::ModelsMember> {
    self.author.as_ref()
  }

  pub fn reset_author(&mut self) {
    self.author = None;
  }

  pub fn set_content(&mut self, content: String) {
    self.content = Some(content);
  }

  pub fn with_content(mut self, content: String) -> ModelsComment {
    self.content = Some(content);
    self
  }

  pub fn content(&self) -> Option<&String> {
    self.content.as_ref()
  }

  pub fn reset_content(&mut self) {
    self.content = None;
  }

  pub fn set_created(&mut self, created: i64) {
    self.created = Some(created);
  }

  pub fn with_created(mut self, created: i64) -> ModelsComment {
    self.created = Some(created);
    self
  }

  pub fn created(&self) -> Option<&i64> {
    self.created.as_ref()
  }

  pub fn reset_created(&mut self) {
    self.created = None;
  }

  pub fn set_id(&mut self, id: i64) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i64) -> ModelsComment {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i64> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_incident(&mut self, incident: ::models::ModelsIncident) {
    self.incident = Some(incident);
  }

  pub fn with_incident(mut self, incident: ::models::ModelsIncident) -> ModelsComment {
    self.incident = Some(incident);
    self
  }

  pub fn incident(&self) -> Option<&::models::ModelsIncident> {
    self.incident.as_ref()
  }

  pub fn reset_incident(&mut self) {
    self.incident = None;
  }

}



