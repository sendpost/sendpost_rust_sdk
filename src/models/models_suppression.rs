/* 
 * SendPost API
 *
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ModelsSuppression {
  #[serde(rename = "created")]
  created: Option<i64>,
  #[serde(rename = "email")]
  email: Option<String>,
  #[serde(rename = "id")]
  id: Option<i64>,
  #[serde(rename = "reason")]
  reason: Option<::models::ModelsSuppressionReason>,
  #[serde(rename = "smtp_error")]
  smtp_error: Option<String>
}

impl ModelsSuppression {
  pub fn new() -> ModelsSuppression {
    ModelsSuppression {
      created: None,
      email: None,
      id: None,
      reason: None,
      smtp_error: None
    }
  }

  pub fn set_created(&mut self, created: i64) {
    self.created = Some(created);
  }

  pub fn with_created(mut self, created: i64) -> ModelsSuppression {
    self.created = Some(created);
    self
  }

  pub fn created(&self) -> Option<&i64> {
    self.created.as_ref()
  }

  pub fn reset_created(&mut self) {
    self.created = None;
  }

  pub fn set_email(&mut self, email: String) {
    self.email = Some(email);
  }

  pub fn with_email(mut self, email: String) -> ModelsSuppression {
    self.email = Some(email);
    self
  }

  pub fn email(&self) -> Option<&String> {
    self.email.as_ref()
  }

  pub fn reset_email(&mut self) {
    self.email = None;
  }

  pub fn set_id(&mut self, id: i64) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i64) -> ModelsSuppression {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i64> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_reason(&mut self, reason: ::models::ModelsSuppressionReason) {
    self.reason = Some(reason);
  }

  pub fn with_reason(mut self, reason: ::models::ModelsSuppressionReason) -> ModelsSuppression {
    self.reason = Some(reason);
    self
  }

  pub fn reason(&self) -> Option<&::models::ModelsSuppressionReason> {
    self.reason.as_ref()
  }

  pub fn reset_reason(&mut self) {
    self.reason = None;
  }

  pub fn set_smtp_error(&mut self, smtp_error: String) {
    self.smtp_error = Some(smtp_error);
  }

  pub fn with_smtp_error(mut self, smtp_error: String) -> ModelsSuppression {
    self.smtp_error = Some(smtp_error);
    self
  }

  pub fn smtp_error(&self) -> Option<&String> {
    self.smtp_error.as_ref()
  }

  pub fn reset_smtp_error(&mut self) {
    self.smtp_error = None;
  }

}



