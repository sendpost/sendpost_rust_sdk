/* 
 * SendPost API
 *
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ModelsEventMetadata {
  #[serde(rename = "clickedURL")]
  clicked_url: Option<String>,
  #[serde(rename = "device")]
  device: Option<::models::UaparserDevice>,
  #[serde(rename = "geo")]
  geo: Option<::models::ModelsCity>,
  #[serde(rename = "os")]
  os: Option<::models::UaparserOs>,
  #[serde(rename = "smtpCode")]
  smtp_code: Option<i64>,
  #[serde(rename = "smtpDescription")]
  smtp_description: Option<String>,
  #[serde(rename = "userAgent")]
  user_agent: Option<::models::UaparserUserAgent>
}

impl ModelsEventMetadata {
  pub fn new() -> ModelsEventMetadata {
    ModelsEventMetadata {
      clicked_url: None,
      device: None,
      geo: None,
      os: None,
      smtp_code: None,
      smtp_description: None,
      user_agent: None
    }
  }

  pub fn set_clicked_url(&mut self, clicked_url: String) {
    self.clicked_url = Some(clicked_url);
  }

  pub fn with_clicked_url(mut self, clicked_url: String) -> ModelsEventMetadata {
    self.clicked_url = Some(clicked_url);
    self
  }

  pub fn clicked_url(&self) -> Option<&String> {
    self.clicked_url.as_ref()
  }

  pub fn reset_clicked_url(&mut self) {
    self.clicked_url = None;
  }

  pub fn set_device(&mut self, device: ::models::UaparserDevice) {
    self.device = Some(device);
  }

  pub fn with_device(mut self, device: ::models::UaparserDevice) -> ModelsEventMetadata {
    self.device = Some(device);
    self
  }

  pub fn device(&self) -> Option<&::models::UaparserDevice> {
    self.device.as_ref()
  }

  pub fn reset_device(&mut self) {
    self.device = None;
  }

  pub fn set_geo(&mut self, geo: ::models::ModelsCity) {
    self.geo = Some(geo);
  }

  pub fn with_geo(mut self, geo: ::models::ModelsCity) -> ModelsEventMetadata {
    self.geo = Some(geo);
    self
  }

  pub fn geo(&self) -> Option<&::models::ModelsCity> {
    self.geo.as_ref()
  }

  pub fn reset_geo(&mut self) {
    self.geo = None;
  }

  pub fn set_os(&mut self, os: ::models::UaparserOs) {
    self.os = Some(os);
  }

  pub fn with_os(mut self, os: ::models::UaparserOs) -> ModelsEventMetadata {
    self.os = Some(os);
    self
  }

  pub fn os(&self) -> Option<&::models::UaparserOs> {
    self.os.as_ref()
  }

  pub fn reset_os(&mut self) {
    self.os = None;
  }

  pub fn set_smtp_code(&mut self, smtp_code: i64) {
    self.smtp_code = Some(smtp_code);
  }

  pub fn with_smtp_code(mut self, smtp_code: i64) -> ModelsEventMetadata {
    self.smtp_code = Some(smtp_code);
    self
  }

  pub fn smtp_code(&self) -> Option<&i64> {
    self.smtp_code.as_ref()
  }

  pub fn reset_smtp_code(&mut self) {
    self.smtp_code = None;
  }

  pub fn set_smtp_description(&mut self, smtp_description: String) {
    self.smtp_description = Some(smtp_description);
  }

  pub fn with_smtp_description(mut self, smtp_description: String) -> ModelsEventMetadata {
    self.smtp_description = Some(smtp_description);
    self
  }

  pub fn smtp_description(&self) -> Option<&String> {
    self.smtp_description.as_ref()
  }

  pub fn reset_smtp_description(&mut self) {
    self.smtp_description = None;
  }

  pub fn set_user_agent(&mut self, user_agent: ::models::UaparserUserAgent) {
    self.user_agent = Some(user_agent);
  }

  pub fn with_user_agent(mut self, user_agent: ::models::UaparserUserAgent) -> ModelsEventMetadata {
    self.user_agent = Some(user_agent);
    self
  }

  pub fn user_agent(&self) -> Option<&::models::UaparserUserAgent> {
    self.user_agent.as_ref()
  }

  pub fn reset_user_agent(&mut self) {
    self.user_agent = None;
  }

}



