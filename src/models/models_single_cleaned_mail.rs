/* 
 * SendPost API
 *
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ModelsSingleCleanedMail {
  #[serde(rename = "email")]
  email: Option<String>,
  #[serde(rename = "error")]
  error: Option<String>,
  #[serde(rename = "reason")]
  reason: Option<::models::ModelsValidationReason>,
  #[serde(rename = "valid")]
  valid: Option<bool>
}

impl ModelsSingleCleanedMail {
  pub fn new() -> ModelsSingleCleanedMail {
    ModelsSingleCleanedMail {
      email: None,
      error: None,
      reason: None,
      valid: None
    }
  }

  pub fn set_email(&mut self, email: String) {
    self.email = Some(email);
  }

  pub fn with_email(mut self, email: String) -> ModelsSingleCleanedMail {
    self.email = Some(email);
    self
  }

  pub fn email(&self) -> Option<&String> {
    self.email.as_ref()
  }

  pub fn reset_email(&mut self) {
    self.email = None;
  }

  pub fn set_error(&mut self, error: String) {
    self.error = Some(error);
  }

  pub fn with_error(mut self, error: String) -> ModelsSingleCleanedMail {
    self.error = Some(error);
    self
  }

  pub fn error(&self) -> Option<&String> {
    self.error.as_ref()
  }

  pub fn reset_error(&mut self) {
    self.error = None;
  }

  pub fn set_reason(&mut self, reason: ::models::ModelsValidationReason) {
    self.reason = Some(reason);
  }

  pub fn with_reason(mut self, reason: ::models::ModelsValidationReason) -> ModelsSingleCleanedMail {
    self.reason = Some(reason);
    self
  }

  pub fn reason(&self) -> Option<&::models::ModelsValidationReason> {
    self.reason.as_ref()
  }

  pub fn reset_reason(&mut self) {
    self.reason = None;
  }

  pub fn set_valid(&mut self, valid: bool) {
    self.valid = Some(valid);
  }

  pub fn with_valid(mut self, valid: bool) -> ModelsSingleCleanedMail {
    self.valid = Some(valid);
    self
  }

  pub fn valid(&self) -> Option<&bool> {
    self.valid.as_ref()
  }

  pub fn reset_valid(&mut self) {
    self.valid = None;
  }

}



