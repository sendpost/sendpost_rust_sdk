/* 
 * SendPost API
 *
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ModelsCity {
  #[serde(rename = "cityID")]
  city_id: Option<i32>,
  #[serde(rename = "continentCode")]
  continent_code: Option<String>,
  #[serde(rename = "countryCode")]
  country_code: Option<String>,
  #[serde(rename = "postalCode")]
  postal_code: Option<String>,
  #[serde(rename = "timeZone")]
  time_zone: Option<String>
}

impl ModelsCity {
  pub fn new() -> ModelsCity {
    ModelsCity {
      city_id: None,
      continent_code: None,
      country_code: None,
      postal_code: None,
      time_zone: None
    }
  }

  pub fn set_city_id(&mut self, city_id: i32) {
    self.city_id = Some(city_id);
  }

  pub fn with_city_id(mut self, city_id: i32) -> ModelsCity {
    self.city_id = Some(city_id);
    self
  }

  pub fn city_id(&self) -> Option<&i32> {
    self.city_id.as_ref()
  }

  pub fn reset_city_id(&mut self) {
    self.city_id = None;
  }

  pub fn set_continent_code(&mut self, continent_code: String) {
    self.continent_code = Some(continent_code);
  }

  pub fn with_continent_code(mut self, continent_code: String) -> ModelsCity {
    self.continent_code = Some(continent_code);
    self
  }

  pub fn continent_code(&self) -> Option<&String> {
    self.continent_code.as_ref()
  }

  pub fn reset_continent_code(&mut self) {
    self.continent_code = None;
  }

  pub fn set_country_code(&mut self, country_code: String) {
    self.country_code = Some(country_code);
  }

  pub fn with_country_code(mut self, country_code: String) -> ModelsCity {
    self.country_code = Some(country_code);
    self
  }

  pub fn country_code(&self) -> Option<&String> {
    self.country_code.as_ref()
  }

  pub fn reset_country_code(&mut self) {
    self.country_code = None;
  }

  pub fn set_postal_code(&mut self, postal_code: String) {
    self.postal_code = Some(postal_code);
  }

  pub fn with_postal_code(mut self, postal_code: String) -> ModelsCity {
    self.postal_code = Some(postal_code);
    self
  }

  pub fn postal_code(&self) -> Option<&String> {
    self.postal_code.as_ref()
  }

  pub fn reset_postal_code(&mut self) {
    self.postal_code = None;
  }

  pub fn set_time_zone(&mut self, time_zone: String) {
    self.time_zone = Some(time_zone);
  }

  pub fn with_time_zone(mut self, time_zone: String) -> ModelsCity {
    self.time_zone = Some(time_zone);
    self
  }

  pub fn time_zone(&self) -> Option<&String> {
    self.time_zone.as_ref()
  }

  pub fn reset_time_zone(&mut self) {
    self.time_zone = None;
  }

}



