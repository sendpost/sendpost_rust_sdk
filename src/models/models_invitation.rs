/* 
 * SendPost API
 *
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ModelsInvitation {
  #[serde(rename = "Id")]
  id: Option<i64>,
  #[serde(rename = "Role")]
  role: Option<::models::ModelsMemberRole>,
  #[serde(rename = "Status")]
  status: Option<::models::ModelsInvitationStatus>,
  #[serde(rename = "ToEmail")]
  to_email: Option<String>,
  #[serde(rename = "created")]
  created: Option<i64>
}

impl ModelsInvitation {
  pub fn new() -> ModelsInvitation {
    ModelsInvitation {
      id: None,
      role: None,
      status: None,
      to_email: None,
      created: None
    }
  }

  pub fn set_id(&mut self, id: i64) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i64) -> ModelsInvitation {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i64> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_role(&mut self, role: ::models::ModelsMemberRole) {
    self.role = Some(role);
  }

  pub fn with_role(mut self, role: ::models::ModelsMemberRole) -> ModelsInvitation {
    self.role = Some(role);
    self
  }

  pub fn role(&self) -> Option<&::models::ModelsMemberRole> {
    self.role.as_ref()
  }

  pub fn reset_role(&mut self) {
    self.role = None;
  }

  pub fn set_status(&mut self, status: ::models::ModelsInvitationStatus) {
    self.status = Some(status);
  }

  pub fn with_status(mut self, status: ::models::ModelsInvitationStatus) -> ModelsInvitation {
    self.status = Some(status);
    self
  }

  pub fn status(&self) -> Option<&::models::ModelsInvitationStatus> {
    self.status.as_ref()
  }

  pub fn reset_status(&mut self) {
    self.status = None;
  }

  pub fn set_to_email(&mut self, to_email: String) {
    self.to_email = Some(to_email);
  }

  pub fn with_to_email(mut self, to_email: String) -> ModelsInvitation {
    self.to_email = Some(to_email);
    self
  }

  pub fn to_email(&self) -> Option<&String> {
    self.to_email.as_ref()
  }

  pub fn reset_to_email(&mut self) {
    self.to_email = None;
  }

  pub fn set_created(&mut self, created: i64) {
    self.created = Some(created);
  }

  pub fn with_created(mut self, created: i64) -> ModelsInvitation {
    self.created = Some(created);
    self
  }

  pub fn created(&self) -> Option<&i64> {
    self.created.as_ref()
  }

  pub fn reset_created(&mut self) {
    self.created = None;
  }

}



