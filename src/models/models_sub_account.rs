/* 
 * SendPost API
 *
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ModelsSubAccount {
  #[serde(rename = "apiKey")]
  api_key: Option<String>,
  #[serde(rename = "created")]
  created: Option<i64>,
  #[serde(rename = "id")]
  id: Option<i64>,
  #[serde(rename = "labels")]
  labels: Option<Vec<::models::ModelsLabel>>,
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "smtpAuths")]
  smtp_auths: Option<Vec<::models::ModelsSmtpAuth>>,
  #[serde(rename = "type")]
  _type: Option<::models::ModelsSubAccountType>
}

impl ModelsSubAccount {
  pub fn new() -> ModelsSubAccount {
    ModelsSubAccount {
      api_key: None,
      created: None,
      id: None,
      labels: None,
      name: None,
      smtp_auths: None,
      _type: None
    }
  }

  pub fn set_api_key(&mut self, api_key: String) {
    self.api_key = Some(api_key);
  }

  pub fn with_api_key(mut self, api_key: String) -> ModelsSubAccount {
    self.api_key = Some(api_key);
    self
  }

  pub fn api_key(&self) -> Option<&String> {
    self.api_key.as_ref()
  }

  pub fn reset_api_key(&mut self) {
    self.api_key = None;
  }

  pub fn set_created(&mut self, created: i64) {
    self.created = Some(created);
  }

  pub fn with_created(mut self, created: i64) -> ModelsSubAccount {
    self.created = Some(created);
    self
  }

  pub fn created(&self) -> Option<&i64> {
    self.created.as_ref()
  }

  pub fn reset_created(&mut self) {
    self.created = None;
  }

  pub fn set_id(&mut self, id: i64) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i64) -> ModelsSubAccount {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i64> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_labels(&mut self, labels: Vec<::models::ModelsLabel>) {
    self.labels = Some(labels);
  }

  pub fn with_labels(mut self, labels: Vec<::models::ModelsLabel>) -> ModelsSubAccount {
    self.labels = Some(labels);
    self
  }

  pub fn labels(&self) -> Option<&Vec<::models::ModelsLabel>> {
    self.labels.as_ref()
  }

  pub fn reset_labels(&mut self) {
    self.labels = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> ModelsSubAccount {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_smtp_auths(&mut self, smtp_auths: Vec<::models::ModelsSmtpAuth>) {
    self.smtp_auths = Some(smtp_auths);
  }

  pub fn with_smtp_auths(mut self, smtp_auths: Vec<::models::ModelsSmtpAuth>) -> ModelsSubAccount {
    self.smtp_auths = Some(smtp_auths);
    self
  }

  pub fn smtp_auths(&self) -> Option<&Vec<::models::ModelsSmtpAuth>> {
    self.smtp_auths.as_ref()
  }

  pub fn reset_smtp_auths(&mut self) {
    self.smtp_auths = None;
  }

  pub fn set__type(&mut self, _type: ::models::ModelsSubAccountType) {
    self._type = Some(_type);
  }

  pub fn with__type(mut self, _type: ::models::ModelsSubAccountType) -> ModelsSubAccount {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> Option<&::models::ModelsSubAccountType> {
    self._type.as_ref()
  }

  pub fn reset__type(&mut self) {
    self._type = None;
  }

}



