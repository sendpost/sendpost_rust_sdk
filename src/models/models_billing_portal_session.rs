/* 
 * SendPost API
 *
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ModelsBillingPortalSession {
  #[serde(rename = "created")]
  created: Option<i64>,
  #[serde(rename = "customer")]
  customer: Option<String>,
  #[serde(rename = "id")]
  id: Option<String>,
  #[serde(rename = "livemode")]
  livemode: Option<bool>,
  #[serde(rename = "object")]
  object: Option<String>,
  #[serde(rename = "return_url")]
  return_url: Option<String>,
  #[serde(rename = "url")]
  url: Option<String>
}

impl ModelsBillingPortalSession {
  pub fn new() -> ModelsBillingPortalSession {
    ModelsBillingPortalSession {
      created: None,
      customer: None,
      id: None,
      livemode: None,
      object: None,
      return_url: None,
      url: None
    }
  }

  pub fn set_created(&mut self, created: i64) {
    self.created = Some(created);
  }

  pub fn with_created(mut self, created: i64) -> ModelsBillingPortalSession {
    self.created = Some(created);
    self
  }

  pub fn created(&self) -> Option<&i64> {
    self.created.as_ref()
  }

  pub fn reset_created(&mut self) {
    self.created = None;
  }

  pub fn set_customer(&mut self, customer: String) {
    self.customer = Some(customer);
  }

  pub fn with_customer(mut self, customer: String) -> ModelsBillingPortalSession {
    self.customer = Some(customer);
    self
  }

  pub fn customer(&self) -> Option<&String> {
    self.customer.as_ref()
  }

  pub fn reset_customer(&mut self) {
    self.customer = None;
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> ModelsBillingPortalSession {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_livemode(&mut self, livemode: bool) {
    self.livemode = Some(livemode);
  }

  pub fn with_livemode(mut self, livemode: bool) -> ModelsBillingPortalSession {
    self.livemode = Some(livemode);
    self
  }

  pub fn livemode(&self) -> Option<&bool> {
    self.livemode.as_ref()
  }

  pub fn reset_livemode(&mut self) {
    self.livemode = None;
  }

  pub fn set_object(&mut self, object: String) {
    self.object = Some(object);
  }

  pub fn with_object(mut self, object: String) -> ModelsBillingPortalSession {
    self.object = Some(object);
    self
  }

  pub fn object(&self) -> Option<&String> {
    self.object.as_ref()
  }

  pub fn reset_object(&mut self) {
    self.object = None;
  }

  pub fn set_return_url(&mut self, return_url: String) {
    self.return_url = Some(return_url);
  }

  pub fn with_return_url(mut self, return_url: String) -> ModelsBillingPortalSession {
    self.return_url = Some(return_url);
    self
  }

  pub fn return_url(&self) -> Option<&String> {
    self.return_url.as_ref()
  }

  pub fn reset_return_url(&mut self) {
    self.return_url = None;
  }

  pub fn set_url(&mut self, url: String) {
    self.url = Some(url);
  }

  pub fn with_url(mut self, url: String) -> ModelsBillingPortalSession {
    self.url = Some(url);
    self
  }

  pub fn url(&self) -> Option<&String> {
    self.url.as_ref()
  }

  pub fn reset_url(&mut self) {
    self.url = None;
  }

}



