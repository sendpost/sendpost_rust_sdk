/* 
 * SendPost API
 *
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ModelsIncident {
  #[serde(rename = "author")]
  author: Option<::models::ModelsMember>,
  #[serde(rename = "created")]
  created: Option<i64>,
  #[serde(rename = "description")]
  description: Option<String>,
  #[serde(rename = "id")]
  id: Option<i64>,
  #[serde(rename = "relatedIP")]
  related_ip: Option<::models::ModelsIp>,
  #[serde(rename = "relatedSubAccount")]
  related_sub_account: Option<::models::ModelsSubAccount>,
  #[serde(rename = "status")]
  status: Option<::models::ModelsIncidentStatus>,
  #[serde(rename = "summary")]
  summary: Option<String>,
  #[serde(rename = "tags")]
  tags: Option<Vec<::models::ModelsTag>>,
  #[serde(rename = "updated")]
  updated: Option<i64>
}

impl ModelsIncident {
  pub fn new() -> ModelsIncident {
    ModelsIncident {
      author: None,
      created: None,
      description: None,
      id: None,
      related_ip: None,
      related_sub_account: None,
      status: None,
      summary: None,
      tags: None,
      updated: None
    }
  }

  pub fn set_author(&mut self, author: ::models::ModelsMember) {
    self.author = Some(author);
  }

  pub fn with_author(mut self, author: ::models::ModelsMember) -> ModelsIncident {
    self.author = Some(author);
    self
  }

  pub fn author(&self) -> Option<&::models::ModelsMember> {
    self.author.as_ref()
  }

  pub fn reset_author(&mut self) {
    self.author = None;
  }

  pub fn set_created(&mut self, created: i64) {
    self.created = Some(created);
  }

  pub fn with_created(mut self, created: i64) -> ModelsIncident {
    self.created = Some(created);
    self
  }

  pub fn created(&self) -> Option<&i64> {
    self.created.as_ref()
  }

  pub fn reset_created(&mut self) {
    self.created = None;
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> ModelsIncident {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_id(&mut self, id: i64) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i64) -> ModelsIncident {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i64> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_related_ip(&mut self, related_ip: ::models::ModelsIp) {
    self.related_ip = Some(related_ip);
  }

  pub fn with_related_ip(mut self, related_ip: ::models::ModelsIp) -> ModelsIncident {
    self.related_ip = Some(related_ip);
    self
  }

  pub fn related_ip(&self) -> Option<&::models::ModelsIp> {
    self.related_ip.as_ref()
  }

  pub fn reset_related_ip(&mut self) {
    self.related_ip = None;
  }

  pub fn set_related_sub_account(&mut self, related_sub_account: ::models::ModelsSubAccount) {
    self.related_sub_account = Some(related_sub_account);
  }

  pub fn with_related_sub_account(mut self, related_sub_account: ::models::ModelsSubAccount) -> ModelsIncident {
    self.related_sub_account = Some(related_sub_account);
    self
  }

  pub fn related_sub_account(&self) -> Option<&::models::ModelsSubAccount> {
    self.related_sub_account.as_ref()
  }

  pub fn reset_related_sub_account(&mut self) {
    self.related_sub_account = None;
  }

  pub fn set_status(&mut self, status: ::models::ModelsIncidentStatus) {
    self.status = Some(status);
  }

  pub fn with_status(mut self, status: ::models::ModelsIncidentStatus) -> ModelsIncident {
    self.status = Some(status);
    self
  }

  pub fn status(&self) -> Option<&::models::ModelsIncidentStatus> {
    self.status.as_ref()
  }

  pub fn reset_status(&mut self) {
    self.status = None;
  }

  pub fn set_summary(&mut self, summary: String) {
    self.summary = Some(summary);
  }

  pub fn with_summary(mut self, summary: String) -> ModelsIncident {
    self.summary = Some(summary);
    self
  }

  pub fn summary(&self) -> Option<&String> {
    self.summary.as_ref()
  }

  pub fn reset_summary(&mut self) {
    self.summary = None;
  }

  pub fn set_tags(&mut self, tags: Vec<::models::ModelsTag>) {
    self.tags = Some(tags);
  }

  pub fn with_tags(mut self, tags: Vec<::models::ModelsTag>) -> ModelsIncident {
    self.tags = Some(tags);
    self
  }

  pub fn tags(&self) -> Option<&Vec<::models::ModelsTag>> {
    self.tags.as_ref()
  }

  pub fn reset_tags(&mut self) {
    self.tags = None;
  }

  pub fn set_updated(&mut self, updated: i64) {
    self.updated = Some(updated);
  }

  pub fn with_updated(mut self, updated: i64) -> ModelsIncident {
    self.updated = Some(updated);
    self
  }

  pub fn updated(&self) -> Option<&i64> {
    self.updated.as_ref()
  }

  pub fn reset_updated(&mut self) {
    self.updated = None;
  }

}



