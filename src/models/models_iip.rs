/* 
 * SendPost API
 *
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ModelsIip {
  #[serde(rename = "backOffConfiguration")]
  back_off_configuration: Option<::models::ModelsBackOffConfiguration>,
  #[serde(rename = "backOffTrigger")]
  back_off_trigger: Option<::models::ModelsBackOffTrigger>,
  #[serde(rename = "maxConcurrentConnections")]
  max_concurrent_connections: Option<i64>,
  #[serde(rename = "maxSendPerDay")]
  max_send_per_day: Option<i64>,
  #[serde(rename = "maxSendPerHour")]
  max_send_per_hour: Option<i64>,
  #[serde(rename = "maxSendPerMinute")]
  max_send_per_minute: Option<i64>,
  #[serde(rename = "name")]
  name: Option<String>
}

impl ModelsIip {
  pub fn new() -> ModelsIip {
    ModelsIip {
      back_off_configuration: None,
      back_off_trigger: None,
      max_concurrent_connections: None,
      max_send_per_day: None,
      max_send_per_hour: None,
      max_send_per_minute: None,
      name: None
    }
  }

  pub fn set_back_off_configuration(&mut self, back_off_configuration: ::models::ModelsBackOffConfiguration) {
    self.back_off_configuration = Some(back_off_configuration);
  }

  pub fn with_back_off_configuration(mut self, back_off_configuration: ::models::ModelsBackOffConfiguration) -> ModelsIip {
    self.back_off_configuration = Some(back_off_configuration);
    self
  }

  pub fn back_off_configuration(&self) -> Option<&::models::ModelsBackOffConfiguration> {
    self.back_off_configuration.as_ref()
  }

  pub fn reset_back_off_configuration(&mut self) {
    self.back_off_configuration = None;
  }

  pub fn set_back_off_trigger(&mut self, back_off_trigger: ::models::ModelsBackOffTrigger) {
    self.back_off_trigger = Some(back_off_trigger);
  }

  pub fn with_back_off_trigger(mut self, back_off_trigger: ::models::ModelsBackOffTrigger) -> ModelsIip {
    self.back_off_trigger = Some(back_off_trigger);
    self
  }

  pub fn back_off_trigger(&self) -> Option<&::models::ModelsBackOffTrigger> {
    self.back_off_trigger.as_ref()
  }

  pub fn reset_back_off_trigger(&mut self) {
    self.back_off_trigger = None;
  }

  pub fn set_max_concurrent_connections(&mut self, max_concurrent_connections: i64) {
    self.max_concurrent_connections = Some(max_concurrent_connections);
  }

  pub fn with_max_concurrent_connections(mut self, max_concurrent_connections: i64) -> ModelsIip {
    self.max_concurrent_connections = Some(max_concurrent_connections);
    self
  }

  pub fn max_concurrent_connections(&self) -> Option<&i64> {
    self.max_concurrent_connections.as_ref()
  }

  pub fn reset_max_concurrent_connections(&mut self) {
    self.max_concurrent_connections = None;
  }

  pub fn set_max_send_per_day(&mut self, max_send_per_day: i64) {
    self.max_send_per_day = Some(max_send_per_day);
  }

  pub fn with_max_send_per_day(mut self, max_send_per_day: i64) -> ModelsIip {
    self.max_send_per_day = Some(max_send_per_day);
    self
  }

  pub fn max_send_per_day(&self) -> Option<&i64> {
    self.max_send_per_day.as_ref()
  }

  pub fn reset_max_send_per_day(&mut self) {
    self.max_send_per_day = None;
  }

  pub fn set_max_send_per_hour(&mut self, max_send_per_hour: i64) {
    self.max_send_per_hour = Some(max_send_per_hour);
  }

  pub fn with_max_send_per_hour(mut self, max_send_per_hour: i64) -> ModelsIip {
    self.max_send_per_hour = Some(max_send_per_hour);
    self
  }

  pub fn max_send_per_hour(&self) -> Option<&i64> {
    self.max_send_per_hour.as_ref()
  }

  pub fn reset_max_send_per_hour(&mut self) {
    self.max_send_per_hour = None;
  }

  pub fn set_max_send_per_minute(&mut self, max_send_per_minute: i64) {
    self.max_send_per_minute = Some(max_send_per_minute);
  }

  pub fn with_max_send_per_minute(mut self, max_send_per_minute: i64) -> ModelsIip {
    self.max_send_per_minute = Some(max_send_per_minute);
    self
  }

  pub fn max_send_per_minute(&self) -> Option<&i64> {
    self.max_send_per_minute.as_ref()
  }

  pub fn reset_max_send_per_minute(&mut self) {
    self.max_send_per_minute = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> ModelsIip {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

}



