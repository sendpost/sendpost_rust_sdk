/* 
 * SendPost API
 *
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ModelsSmtpAuth {
  #[serde(rename = "created")]
  created: Option<i64>,
  #[serde(rename = "id")]
  id: Option<i64>,
  #[serde(rename = "password")]
  password: Option<String>,
  #[serde(rename = "updated")]
  updated: Option<i64>,
  #[serde(rename = "username")]
  username: Option<String>
}

impl ModelsSmtpAuth {
  pub fn new() -> ModelsSmtpAuth {
    ModelsSmtpAuth {
      created: None,
      id: None,
      password: None,
      updated: None,
      username: None
    }
  }

  pub fn set_created(&mut self, created: i64) {
    self.created = Some(created);
  }

  pub fn with_created(mut self, created: i64) -> ModelsSmtpAuth {
    self.created = Some(created);
    self
  }

  pub fn created(&self) -> Option<&i64> {
    self.created.as_ref()
  }

  pub fn reset_created(&mut self) {
    self.created = None;
  }

  pub fn set_id(&mut self, id: i64) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i64) -> ModelsSmtpAuth {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i64> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_password(&mut self, password: String) {
    self.password = Some(password);
  }

  pub fn with_password(mut self, password: String) -> ModelsSmtpAuth {
    self.password = Some(password);
    self
  }

  pub fn password(&self) -> Option<&String> {
    self.password.as_ref()
  }

  pub fn reset_password(&mut self) {
    self.password = None;
  }

  pub fn set_updated(&mut self, updated: i64) {
    self.updated = Some(updated);
  }

  pub fn with_updated(mut self, updated: i64) -> ModelsSmtpAuth {
    self.updated = Some(updated);
    self
  }

  pub fn updated(&self) -> Option<&i64> {
    self.updated.as_ref()
  }

  pub fn reset_updated(&mut self) {
    self.updated = None;
  }

  pub fn set_username(&mut self, username: String) {
    self.username = Some(username);
  }

  pub fn with_username(mut self, username: String) -> ModelsSmtpAuth {
    self.username = Some(username);
    self
  }

  pub fn username(&self) -> Option<&String> {
    self.username.as_ref()
  }

  pub fn reset_username(&mut self) {
    self.username = None;
  }

}



