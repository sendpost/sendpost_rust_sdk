/* 
 * SendPost API
 *
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ModelsEAccountMember {
  #[serde(rename = "companyName")]
  company_name: Option<String>,
  #[serde(rename = "currentEmailServiceProvider")]
  current_email_service_provider: Option<String>,
  #[serde(rename = "industry")]
  industry: Option<String>,
  #[serde(rename = "logoURL")]
  logo_url: Option<String>,
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "onboardCFinished")]
  onboard_c_finished: Option<bool>,
  #[serde(rename = "onboardQAnswered")]
  onboard_q_answered: Option<bool>,
  #[serde(rename = "phoneNumber")]
  phone_number: Option<String>,
  #[serde(rename = "sendingVolumePerMonth")]
  sending_volume_per_month: Option<String>,
  #[serde(rename = "uid")]
  uid: Option<String>,
  #[serde(rename = "verifyEmail")]
  verify_email: Option<bool>
}

impl ModelsEAccountMember {
  pub fn new() -> ModelsEAccountMember {
    ModelsEAccountMember {
      company_name: None,
      current_email_service_provider: None,
      industry: None,
      logo_url: None,
      name: None,
      onboard_c_finished: None,
      onboard_q_answered: None,
      phone_number: None,
      sending_volume_per_month: None,
      uid: None,
      verify_email: None
    }
  }

  pub fn set_company_name(&mut self, company_name: String) {
    self.company_name = Some(company_name);
  }

  pub fn with_company_name(mut self, company_name: String) -> ModelsEAccountMember {
    self.company_name = Some(company_name);
    self
  }

  pub fn company_name(&self) -> Option<&String> {
    self.company_name.as_ref()
  }

  pub fn reset_company_name(&mut self) {
    self.company_name = None;
  }

  pub fn set_current_email_service_provider(&mut self, current_email_service_provider: String) {
    self.current_email_service_provider = Some(current_email_service_provider);
  }

  pub fn with_current_email_service_provider(mut self, current_email_service_provider: String) -> ModelsEAccountMember {
    self.current_email_service_provider = Some(current_email_service_provider);
    self
  }

  pub fn current_email_service_provider(&self) -> Option<&String> {
    self.current_email_service_provider.as_ref()
  }

  pub fn reset_current_email_service_provider(&mut self) {
    self.current_email_service_provider = None;
  }

  pub fn set_industry(&mut self, industry: String) {
    self.industry = Some(industry);
  }

  pub fn with_industry(mut self, industry: String) -> ModelsEAccountMember {
    self.industry = Some(industry);
    self
  }

  pub fn industry(&self) -> Option<&String> {
    self.industry.as_ref()
  }

  pub fn reset_industry(&mut self) {
    self.industry = None;
  }

  pub fn set_logo_url(&mut self, logo_url: String) {
    self.logo_url = Some(logo_url);
  }

  pub fn with_logo_url(mut self, logo_url: String) -> ModelsEAccountMember {
    self.logo_url = Some(logo_url);
    self
  }

  pub fn logo_url(&self) -> Option<&String> {
    self.logo_url.as_ref()
  }

  pub fn reset_logo_url(&mut self) {
    self.logo_url = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> ModelsEAccountMember {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_onboard_c_finished(&mut self, onboard_c_finished: bool) {
    self.onboard_c_finished = Some(onboard_c_finished);
  }

  pub fn with_onboard_c_finished(mut self, onboard_c_finished: bool) -> ModelsEAccountMember {
    self.onboard_c_finished = Some(onboard_c_finished);
    self
  }

  pub fn onboard_c_finished(&self) -> Option<&bool> {
    self.onboard_c_finished.as_ref()
  }

  pub fn reset_onboard_c_finished(&mut self) {
    self.onboard_c_finished = None;
  }

  pub fn set_onboard_q_answered(&mut self, onboard_q_answered: bool) {
    self.onboard_q_answered = Some(onboard_q_answered);
  }

  pub fn with_onboard_q_answered(mut self, onboard_q_answered: bool) -> ModelsEAccountMember {
    self.onboard_q_answered = Some(onboard_q_answered);
    self
  }

  pub fn onboard_q_answered(&self) -> Option<&bool> {
    self.onboard_q_answered.as_ref()
  }

  pub fn reset_onboard_q_answered(&mut self) {
    self.onboard_q_answered = None;
  }

  pub fn set_phone_number(&mut self, phone_number: String) {
    self.phone_number = Some(phone_number);
  }

  pub fn with_phone_number(mut self, phone_number: String) -> ModelsEAccountMember {
    self.phone_number = Some(phone_number);
    self
  }

  pub fn phone_number(&self) -> Option<&String> {
    self.phone_number.as_ref()
  }

  pub fn reset_phone_number(&mut self) {
    self.phone_number = None;
  }

  pub fn set_sending_volume_per_month(&mut self, sending_volume_per_month: String) {
    self.sending_volume_per_month = Some(sending_volume_per_month);
  }

  pub fn with_sending_volume_per_month(mut self, sending_volume_per_month: String) -> ModelsEAccountMember {
    self.sending_volume_per_month = Some(sending_volume_per_month);
    self
  }

  pub fn sending_volume_per_month(&self) -> Option<&String> {
    self.sending_volume_per_month.as_ref()
  }

  pub fn reset_sending_volume_per_month(&mut self) {
    self.sending_volume_per_month = None;
  }

  pub fn set_uid(&mut self, uid: String) {
    self.uid = Some(uid);
  }

  pub fn with_uid(mut self, uid: String) -> ModelsEAccountMember {
    self.uid = Some(uid);
    self
  }

  pub fn uid(&self) -> Option<&String> {
    self.uid.as_ref()
  }

  pub fn reset_uid(&mut self) {
    self.uid = None;
  }

  pub fn set_verify_email(&mut self, verify_email: bool) {
    self.verify_email = Some(verify_email);
  }

  pub fn with_verify_email(mut self, verify_email: bool) -> ModelsEAccountMember {
    self.verify_email = Some(verify_email);
    self
  }

  pub fn verify_email(&self) -> Option<&bool> {
    self.verify_email.as_ref()
  }

  pub fn reset_verify_email(&mut self) {
    self.verify_email = None;
  }

}



