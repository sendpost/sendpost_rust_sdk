/* 
 * SendPost API
 *
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ModelsMember {
  #[serde(rename = "Email")]
  email: Option<String>,
  #[serde(rename = "Id")]
  id: Option<i64>,
  #[serde(rename = "IsForbidden")]
  is_forbidden: Option<bool>,
  #[serde(rename = "IsVerified")]
  is_verified: Option<bool>,
  #[serde(rename = "companyName")]
  company_name: Option<String>,
  #[serde(rename = "created")]
  created: Option<i64>,
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "phoneNumber")]
  phone_number: Option<String>
}

impl ModelsMember {
  pub fn new() -> ModelsMember {
    ModelsMember {
      email: None,
      id: None,
      is_forbidden: None,
      is_verified: None,
      company_name: None,
      created: None,
      name: None,
      phone_number: None
    }
  }

  pub fn set_email(&mut self, email: String) {
    self.email = Some(email);
  }

  pub fn with_email(mut self, email: String) -> ModelsMember {
    self.email = Some(email);
    self
  }

  pub fn email(&self) -> Option<&String> {
    self.email.as_ref()
  }

  pub fn reset_email(&mut self) {
    self.email = None;
  }

  pub fn set_id(&mut self, id: i64) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i64) -> ModelsMember {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i64> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_is_forbidden(&mut self, is_forbidden: bool) {
    self.is_forbidden = Some(is_forbidden);
  }

  pub fn with_is_forbidden(mut self, is_forbidden: bool) -> ModelsMember {
    self.is_forbidden = Some(is_forbidden);
    self
  }

  pub fn is_forbidden(&self) -> Option<&bool> {
    self.is_forbidden.as_ref()
  }

  pub fn reset_is_forbidden(&mut self) {
    self.is_forbidden = None;
  }

  pub fn set_is_verified(&mut self, is_verified: bool) {
    self.is_verified = Some(is_verified);
  }

  pub fn with_is_verified(mut self, is_verified: bool) -> ModelsMember {
    self.is_verified = Some(is_verified);
    self
  }

  pub fn is_verified(&self) -> Option<&bool> {
    self.is_verified.as_ref()
  }

  pub fn reset_is_verified(&mut self) {
    self.is_verified = None;
  }

  pub fn set_company_name(&mut self, company_name: String) {
    self.company_name = Some(company_name);
  }

  pub fn with_company_name(mut self, company_name: String) -> ModelsMember {
    self.company_name = Some(company_name);
    self
  }

  pub fn company_name(&self) -> Option<&String> {
    self.company_name.as_ref()
  }

  pub fn reset_company_name(&mut self) {
    self.company_name = None;
  }

  pub fn set_created(&mut self, created: i64) {
    self.created = Some(created);
  }

  pub fn with_created(mut self, created: i64) -> ModelsMember {
    self.created = Some(created);
    self
  }

  pub fn created(&self) -> Option<&i64> {
    self.created.as_ref()
  }

  pub fn reset_created(&mut self) {
    self.created = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> ModelsMember {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_phone_number(&mut self, phone_number: String) {
    self.phone_number = Some(phone_number);
  }

  pub fn with_phone_number(mut self, phone_number: String) -> ModelsMember {
    self.phone_number = Some(phone_number);
    self
  }

  pub fn phone_number(&self) -> Option<&String> {
    self.phone_number.as_ref()
  }

  pub fn reset_phone_number(&mut self) {
    self.phone_number = None;
  }

}



