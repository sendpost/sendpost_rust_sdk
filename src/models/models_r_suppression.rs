/* 
 * SendPost API
 *
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ModelsRSuppression {
  #[serde(rename = "hardBounce")]
  hard_bounce: Option<Vec<::models::ModelsSuppressionEmail>>,
  #[serde(rename = "manual")]
  manual: Option<Vec<::models::ModelsSuppressionEmail>>,
  #[serde(rename = "spamComplaint")]
  spam_complaint: Option<Vec<::models::ModelsSuppressionEmail>>,
  #[serde(rename = "unsubscribe")]
  unsubscribe: Option<Vec<::models::ModelsSuppressionEmail>>
}

impl ModelsRSuppression {
  pub fn new() -> ModelsRSuppression {
    ModelsRSuppression {
      hard_bounce: None,
      manual: None,
      spam_complaint: None,
      unsubscribe: None
    }
  }

  pub fn set_hard_bounce(&mut self, hard_bounce: Vec<::models::ModelsSuppressionEmail>) {
    self.hard_bounce = Some(hard_bounce);
  }

  pub fn with_hard_bounce(mut self, hard_bounce: Vec<::models::ModelsSuppressionEmail>) -> ModelsRSuppression {
    self.hard_bounce = Some(hard_bounce);
    self
  }

  pub fn hard_bounce(&self) -> Option<&Vec<::models::ModelsSuppressionEmail>> {
    self.hard_bounce.as_ref()
  }

  pub fn reset_hard_bounce(&mut self) {
    self.hard_bounce = None;
  }

  pub fn set_manual(&mut self, manual: Vec<::models::ModelsSuppressionEmail>) {
    self.manual = Some(manual);
  }

  pub fn with_manual(mut self, manual: Vec<::models::ModelsSuppressionEmail>) -> ModelsRSuppression {
    self.manual = Some(manual);
    self
  }

  pub fn manual(&self) -> Option<&Vec<::models::ModelsSuppressionEmail>> {
    self.manual.as_ref()
  }

  pub fn reset_manual(&mut self) {
    self.manual = None;
  }

  pub fn set_spam_complaint(&mut self, spam_complaint: Vec<::models::ModelsSuppressionEmail>) {
    self.spam_complaint = Some(spam_complaint);
  }

  pub fn with_spam_complaint(mut self, spam_complaint: Vec<::models::ModelsSuppressionEmail>) -> ModelsRSuppression {
    self.spam_complaint = Some(spam_complaint);
    self
  }

  pub fn spam_complaint(&self) -> Option<&Vec<::models::ModelsSuppressionEmail>> {
    self.spam_complaint.as_ref()
  }

  pub fn reset_spam_complaint(&mut self) {
    self.spam_complaint = None;
  }

  pub fn set_unsubscribe(&mut self, unsubscribe: Vec<::models::ModelsSuppressionEmail>) {
    self.unsubscribe = Some(unsubscribe);
  }

  pub fn with_unsubscribe(mut self, unsubscribe: Vec<::models::ModelsSuppressionEmail>) -> ModelsRSuppression {
    self.unsubscribe = Some(unsubscribe);
    self
  }

  pub fn unsubscribe(&self) -> Option<&Vec<::models::ModelsSuppressionEmail>> {
    self.unsubscribe.as_ref()
  }

  pub fn reset_unsubscribe(&mut self) {
    self.unsubscribe = None;
  }

}



