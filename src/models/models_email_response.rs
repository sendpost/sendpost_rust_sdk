/* 
 * SendPost API
 *
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ModelsEmailResponse {
  #[serde(rename = "errorCode")]
  error_code: Option<::models::ModelsEmailErrorCode>,
  #[serde(rename = "message")]
  message: Option<String>,
  #[serde(rename = "messageId")]
  message_id: Option<String>,
  #[serde(rename = "submittedAt")]
  submitted_at: Option<i64>,
  #[serde(rename = "to")]
  to: Option<String>
}

impl ModelsEmailResponse {
  pub fn new() -> ModelsEmailResponse {
    ModelsEmailResponse {
      error_code: None,
      message: None,
      message_id: None,
      submitted_at: None,
      to: None
    }
  }

  pub fn set_error_code(&mut self, error_code: ::models::ModelsEmailErrorCode) {
    self.error_code = Some(error_code);
  }

  pub fn with_error_code(mut self, error_code: ::models::ModelsEmailErrorCode) -> ModelsEmailResponse {
    self.error_code = Some(error_code);
    self
  }

  pub fn error_code(&self) -> Option<&::models::ModelsEmailErrorCode> {
    self.error_code.as_ref()
  }

  pub fn reset_error_code(&mut self) {
    self.error_code = None;
  }

  pub fn set_message(&mut self, message: String) {
    self.message = Some(message);
  }

  pub fn with_message(mut self, message: String) -> ModelsEmailResponse {
    self.message = Some(message);
    self
  }

  pub fn message(&self) -> Option<&String> {
    self.message.as_ref()
  }

  pub fn reset_message(&mut self) {
    self.message = None;
  }

  pub fn set_message_id(&mut self, message_id: String) {
    self.message_id = Some(message_id);
  }

  pub fn with_message_id(mut self, message_id: String) -> ModelsEmailResponse {
    self.message_id = Some(message_id);
    self
  }

  pub fn message_id(&self) -> Option<&String> {
    self.message_id.as_ref()
  }

  pub fn reset_message_id(&mut self) {
    self.message_id = None;
  }

  pub fn set_submitted_at(&mut self, submitted_at: i64) {
    self.submitted_at = Some(submitted_at);
  }

  pub fn with_submitted_at(mut self, submitted_at: i64) -> ModelsEmailResponse {
    self.submitted_at = Some(submitted_at);
    self
  }

  pub fn submitted_at(&self) -> Option<&i64> {
    self.submitted_at.as_ref()
  }

  pub fn reset_submitted_at(&mut self) {
    self.submitted_at = None;
  }

  pub fn set_to(&mut self, to: String) {
    self.to = Some(to);
  }

  pub fn with_to(mut self, to: String) -> ModelsEmailResponse {
    self.to = Some(to);
    self
  }

  pub fn to(&self) -> Option<&String> {
    self.to.as_ref()
  }

  pub fn reset_to(&mut self) {
    self.to = None;
  }

}



