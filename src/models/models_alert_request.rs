/* 
 * SendPost API
 *
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ModelsAlertRequest {
  #[serde(rename = "active")]
  active: Option<bool>,
  #[serde(rename = "emails")]
  emails: Option<Value>,
  #[serde(rename = "entityType")]
  entity_type: Option<String>,
  #[serde(rename = "entityValue")]
  entity_value: Option<i64>,
  #[serde(rename = "label")]
  label: Option<::models::ModelsAlertLabel>,
  #[serde(rename = "member")]
  member: Option<i64>,
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "notificationType")]
  notification_type: Option<::models::ModelsNotificationType>,
  #[serde(rename = "parameter")]
  parameter: Option<i64>,
  #[serde(rename = "provider")]
  provider: Option<String>,
  #[serde(rename = "slackUrl")]
  slack_url: Option<String>,
  #[serde(rename = "threshold")]
  threshold: Option<String>
}

impl ModelsAlertRequest {
  pub fn new() -> ModelsAlertRequest {
    ModelsAlertRequest {
      active: None,
      emails: None,
      entity_type: None,
      entity_value: None,
      label: None,
      member: None,
      name: None,
      notification_type: None,
      parameter: None,
      provider: None,
      slack_url: None,
      threshold: None
    }
  }

  pub fn set_active(&mut self, active: bool) {
    self.active = Some(active);
  }

  pub fn with_active(mut self, active: bool) -> ModelsAlertRequest {
    self.active = Some(active);
    self
  }

  pub fn active(&self) -> Option<&bool> {
    self.active.as_ref()
  }

  pub fn reset_active(&mut self) {
    self.active = None;
  }

  pub fn set_emails(&mut self, emails: Value) {
    self.emails = Some(emails);
  }

  pub fn with_emails(mut self, emails: Value) -> ModelsAlertRequest {
    self.emails = Some(emails);
    self
  }

  pub fn emails(&self) -> Option<&Value> {
    self.emails.as_ref()
  }

  pub fn reset_emails(&mut self) {
    self.emails = None;
  }

  pub fn set_entity_type(&mut self, entity_type: String) {
    self.entity_type = Some(entity_type);
  }

  pub fn with_entity_type(mut self, entity_type: String) -> ModelsAlertRequest {
    self.entity_type = Some(entity_type);
    self
  }

  pub fn entity_type(&self) -> Option<&String> {
    self.entity_type.as_ref()
  }

  pub fn reset_entity_type(&mut self) {
    self.entity_type = None;
  }

  pub fn set_entity_value(&mut self, entity_value: i64) {
    self.entity_value = Some(entity_value);
  }

  pub fn with_entity_value(mut self, entity_value: i64) -> ModelsAlertRequest {
    self.entity_value = Some(entity_value);
    self
  }

  pub fn entity_value(&self) -> Option<&i64> {
    self.entity_value.as_ref()
  }

  pub fn reset_entity_value(&mut self) {
    self.entity_value = None;
  }

  pub fn set_label(&mut self, label: ::models::ModelsAlertLabel) {
    self.label = Some(label);
  }

  pub fn with_label(mut self, label: ::models::ModelsAlertLabel) -> ModelsAlertRequest {
    self.label = Some(label);
    self
  }

  pub fn label(&self) -> Option<&::models::ModelsAlertLabel> {
    self.label.as_ref()
  }

  pub fn reset_label(&mut self) {
    self.label = None;
  }

  pub fn set_member(&mut self, member: i64) {
    self.member = Some(member);
  }

  pub fn with_member(mut self, member: i64) -> ModelsAlertRequest {
    self.member = Some(member);
    self
  }

  pub fn member(&self) -> Option<&i64> {
    self.member.as_ref()
  }

  pub fn reset_member(&mut self) {
    self.member = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> ModelsAlertRequest {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_notification_type(&mut self, notification_type: ::models::ModelsNotificationType) {
    self.notification_type = Some(notification_type);
  }

  pub fn with_notification_type(mut self, notification_type: ::models::ModelsNotificationType) -> ModelsAlertRequest {
    self.notification_type = Some(notification_type);
    self
  }

  pub fn notification_type(&self) -> Option<&::models::ModelsNotificationType> {
    self.notification_type.as_ref()
  }

  pub fn reset_notification_type(&mut self) {
    self.notification_type = None;
  }

  pub fn set_parameter(&mut self, parameter: i64) {
    self.parameter = Some(parameter);
  }

  pub fn with_parameter(mut self, parameter: i64) -> ModelsAlertRequest {
    self.parameter = Some(parameter);
    self
  }

  pub fn parameter(&self) -> Option<&i64> {
    self.parameter.as_ref()
  }

  pub fn reset_parameter(&mut self) {
    self.parameter = None;
  }

  pub fn set_provider(&mut self, provider: String) {
    self.provider = Some(provider);
  }

  pub fn with_provider(mut self, provider: String) -> ModelsAlertRequest {
    self.provider = Some(provider);
    self
  }

  pub fn provider(&self) -> Option<&String> {
    self.provider.as_ref()
  }

  pub fn reset_provider(&mut self) {
    self.provider = None;
  }

  pub fn set_slack_url(&mut self, slack_url: String) {
    self.slack_url = Some(slack_url);
  }

  pub fn with_slack_url(mut self, slack_url: String) -> ModelsAlertRequest {
    self.slack_url = Some(slack_url);
    self
  }

  pub fn slack_url(&self) -> Option<&String> {
    self.slack_url.as_ref()
  }

  pub fn reset_slack_url(&mut self) {
    self.slack_url = None;
  }

  pub fn set_threshold(&mut self, threshold: String) {
    self.threshold = Some(threshold);
  }

  pub fn with_threshold(mut self, threshold: String) -> ModelsAlertRequest {
    self.threshold = Some(threshold);
    self
  }

  pub fn threshold(&self) -> Option<&String> {
    self.threshold.as_ref()
  }

  pub fn reset_threshold(&mut self) {
    self.threshold = None;
  }

}



