/* 
 * SendPost API
 *
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ModelsESender {
  #[serde(rename = "domain")]
  domain: Option<String>,
  #[serde(rename = "fromEmail")]
  from_email: Option<String>,
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "replyToEmail")]
  reply_to_email: Option<String>
}

impl ModelsESender {
  pub fn new() -> ModelsESender {
    ModelsESender {
      domain: None,
      from_email: None,
      name: None,
      reply_to_email: None
    }
  }

  pub fn set_domain(&mut self, domain: String) {
    self.domain = Some(domain);
  }

  pub fn with_domain(mut self, domain: String) -> ModelsESender {
    self.domain = Some(domain);
    self
  }

  pub fn domain(&self) -> Option<&String> {
    self.domain.as_ref()
  }

  pub fn reset_domain(&mut self) {
    self.domain = None;
  }

  pub fn set_from_email(&mut self, from_email: String) {
    self.from_email = Some(from_email);
  }

  pub fn with_from_email(mut self, from_email: String) -> ModelsESender {
    self.from_email = Some(from_email);
    self
  }

  pub fn from_email(&self) -> Option<&String> {
    self.from_email.as_ref()
  }

  pub fn reset_from_email(&mut self) {
    self.from_email = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> ModelsESender {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_reply_to_email(&mut self, reply_to_email: String) {
    self.reply_to_email = Some(reply_to_email);
  }

  pub fn with_reply_to_email(mut self, reply_to_email: String) -> ModelsESender {
    self.reply_to_email = Some(reply_to_email);
    self
  }

  pub fn reply_to_email(&self) -> Option<&String> {
    self.reply_to_email.as_ref()
  }

  pub fn reset_reply_to_email(&mut self) {
    self.reply_to_email = None;
  }

}



