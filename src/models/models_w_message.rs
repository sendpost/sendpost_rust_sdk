/* 
 * SendPost API
 *
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ModelsWMessage {
  #[serde(rename = "AccountID")]
  account_id: Option<i64>,
  #[serde(rename = "Groups")]
  groups: Option<Value>,
  #[serde(rename = "IPID")]
  IPID: Option<i64>,
  #[serde(rename = "MessageType")]
  message_type: Option<String>,
  #[serde(rename = "MessageUUID")]
  message_uuid: Option<String>,
  #[serde(rename = "MockMessage")]
  mock_message: Option<bool>,
  #[serde(rename = "MockTimeShift")]
  mock_time_shift: Option<i64>,
  #[serde(rename = "SMTPCode")]
  smtp_code: Option<i64>,
  #[serde(rename = "SMTPDescription")]
  smtp_description: Option<String>,
  #[serde(rename = "SubAccountID")]
  sub_account_id: Option<i64>,
  #[serde(rename = "To")]
  to: Option<String>,
  #[serde(rename = "Type")]
  _type: Option<::models::ModelsEventType>
}

impl ModelsWMessage {
  pub fn new() -> ModelsWMessage {
    ModelsWMessage {
      account_id: None,
      groups: None,
      IPID: None,
      message_type: None,
      message_uuid: None,
      mock_message: None,
      mock_time_shift: None,
      smtp_code: None,
      smtp_description: None,
      sub_account_id: None,
      to: None,
      _type: None
    }
  }

  pub fn set_account_id(&mut self, account_id: i64) {
    self.account_id = Some(account_id);
  }

  pub fn with_account_id(mut self, account_id: i64) -> ModelsWMessage {
    self.account_id = Some(account_id);
    self
  }

  pub fn account_id(&self) -> Option<&i64> {
    self.account_id.as_ref()
  }

  pub fn reset_account_id(&mut self) {
    self.account_id = None;
  }

  pub fn set_groups(&mut self, groups: Value) {
    self.groups = Some(groups);
  }

  pub fn with_groups(mut self, groups: Value) -> ModelsWMessage {
    self.groups = Some(groups);
    self
  }

  pub fn groups(&self) -> Option<&Value> {
    self.groups.as_ref()
  }

  pub fn reset_groups(&mut self) {
    self.groups = None;
  }

  pub fn set_IPID(&mut self, IPID: i64) {
    self.IPID = Some(IPID);
  }

  pub fn with_IPID(mut self, IPID: i64) -> ModelsWMessage {
    self.IPID = Some(IPID);
    self
  }

  pub fn IPID(&self) -> Option<&i64> {
    self.IPID.as_ref()
  }

  pub fn reset_IPID(&mut self) {
    self.IPID = None;
  }

  pub fn set_message_type(&mut self, message_type: String) {
    self.message_type = Some(message_type);
  }

  pub fn with_message_type(mut self, message_type: String) -> ModelsWMessage {
    self.message_type = Some(message_type);
    self
  }

  pub fn message_type(&self) -> Option<&String> {
    self.message_type.as_ref()
  }

  pub fn reset_message_type(&mut self) {
    self.message_type = None;
  }

  pub fn set_message_uuid(&mut self, message_uuid: String) {
    self.message_uuid = Some(message_uuid);
  }

  pub fn with_message_uuid(mut self, message_uuid: String) -> ModelsWMessage {
    self.message_uuid = Some(message_uuid);
    self
  }

  pub fn message_uuid(&self) -> Option<&String> {
    self.message_uuid.as_ref()
  }

  pub fn reset_message_uuid(&mut self) {
    self.message_uuid = None;
  }

  pub fn set_mock_message(&mut self, mock_message: bool) {
    self.mock_message = Some(mock_message);
  }

  pub fn with_mock_message(mut self, mock_message: bool) -> ModelsWMessage {
    self.mock_message = Some(mock_message);
    self
  }

  pub fn mock_message(&self) -> Option<&bool> {
    self.mock_message.as_ref()
  }

  pub fn reset_mock_message(&mut self) {
    self.mock_message = None;
  }

  pub fn set_mock_time_shift(&mut self, mock_time_shift: i64) {
    self.mock_time_shift = Some(mock_time_shift);
  }

  pub fn with_mock_time_shift(mut self, mock_time_shift: i64) -> ModelsWMessage {
    self.mock_time_shift = Some(mock_time_shift);
    self
  }

  pub fn mock_time_shift(&self) -> Option<&i64> {
    self.mock_time_shift.as_ref()
  }

  pub fn reset_mock_time_shift(&mut self) {
    self.mock_time_shift = None;
  }

  pub fn set_smtp_code(&mut self, smtp_code: i64) {
    self.smtp_code = Some(smtp_code);
  }

  pub fn with_smtp_code(mut self, smtp_code: i64) -> ModelsWMessage {
    self.smtp_code = Some(smtp_code);
    self
  }

  pub fn smtp_code(&self) -> Option<&i64> {
    self.smtp_code.as_ref()
  }

  pub fn reset_smtp_code(&mut self) {
    self.smtp_code = None;
  }

  pub fn set_smtp_description(&mut self, smtp_description: String) {
    self.smtp_description = Some(smtp_description);
  }

  pub fn with_smtp_description(mut self, smtp_description: String) -> ModelsWMessage {
    self.smtp_description = Some(smtp_description);
    self
  }

  pub fn smtp_description(&self) -> Option<&String> {
    self.smtp_description.as_ref()
  }

  pub fn reset_smtp_description(&mut self) {
    self.smtp_description = None;
  }

  pub fn set_sub_account_id(&mut self, sub_account_id: i64) {
    self.sub_account_id = Some(sub_account_id);
  }

  pub fn with_sub_account_id(mut self, sub_account_id: i64) -> ModelsWMessage {
    self.sub_account_id = Some(sub_account_id);
    self
  }

  pub fn sub_account_id(&self) -> Option<&i64> {
    self.sub_account_id.as_ref()
  }

  pub fn reset_sub_account_id(&mut self) {
    self.sub_account_id = None;
  }

  pub fn set_to(&mut self, to: String) {
    self.to = Some(to);
  }

  pub fn with_to(mut self, to: String) -> ModelsWMessage {
    self.to = Some(to);
    self
  }

  pub fn to(&self) -> Option<&String> {
    self.to.as_ref()
  }

  pub fn reset_to(&mut self) {
    self.to = None;
  }

  pub fn set__type(&mut self, _type: ::models::ModelsEventType) {
    self._type = Some(_type);
  }

  pub fn with__type(mut self, _type: ::models::ModelsEventType) -> ModelsWMessage {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> Option<&::models::ModelsEventType> {
    self._type.as_ref()
  }

  pub fn reset__type(&mut self) {
    self._type = None;
  }

}



