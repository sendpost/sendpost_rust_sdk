/* 
 * SendPost API
 *
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ModelsCleanedList {
  #[serde(rename = "detailedResponse")]
  detailed_response: Option<Vec<::models::ModelsSingleCleanedMail>>,
  #[serde(rename = "invalid")]
  invalid: Option<Value>,
  #[serde(rename = "valid")]
  valid: Option<Value>
}

impl ModelsCleanedList {
  pub fn new() -> ModelsCleanedList {
    ModelsCleanedList {
      detailed_response: None,
      invalid: None,
      valid: None
    }
  }

  pub fn set_detailed_response(&mut self, detailed_response: Vec<::models::ModelsSingleCleanedMail>) {
    self.detailed_response = Some(detailed_response);
  }

  pub fn with_detailed_response(mut self, detailed_response: Vec<::models::ModelsSingleCleanedMail>) -> ModelsCleanedList {
    self.detailed_response = Some(detailed_response);
    self
  }

  pub fn detailed_response(&self) -> Option<&Vec<::models::ModelsSingleCleanedMail>> {
    self.detailed_response.as_ref()
  }

  pub fn reset_detailed_response(&mut self) {
    self.detailed_response = None;
  }

  pub fn set_invalid(&mut self, invalid: Value) {
    self.invalid = Some(invalid);
  }

  pub fn with_invalid(mut self, invalid: Value) -> ModelsCleanedList {
    self.invalid = Some(invalid);
    self
  }

  pub fn invalid(&self) -> Option<&Value> {
    self.invalid.as_ref()
  }

  pub fn reset_invalid(&mut self) {
    self.invalid = None;
  }

  pub fn set_valid(&mut self, valid: Value) {
    self.valid = Some(valid);
  }

  pub fn with_valid(mut self, valid: Value) -> ModelsCleanedList {
    self.valid = Some(valid);
    self
  }

  pub fn valid(&self) -> Option<&Value> {
    self.valid.as_ref()
  }

  pub fn reset_valid(&mut self) {
    self.valid = None;
  }

}



