/* 
 * SendPost API
 *
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ModelsIp {
  #[serde(rename = "aolSettings")]
  aol_settings: Option<String>,
  #[serde(rename = "autoWarmupEnabled")]
  auto_warmup_enabled: Option<bool>,
  #[serde(rename = "autoWarmupStage")]
  auto_warmup_stage: Option<i64>,
  #[serde(rename = "comcastSettings")]
  comcast_settings: Option<String>,
  #[serde(rename = "created")]
  created: Option<i64>,
  #[serde(rename = "defaultSettings")]
  default_settings: Option<String>,
  #[serde(rename = "gmailSettings")]
  gmail_settings: Option<String>,
  #[serde(rename = "gmxSettings")]
  gmx_settings: Option<String>,
  #[serde(rename = "icloudSettings")]
  icloud_settings: Option<String>,
  #[serde(rename = "id")]
  id: Option<i64>,
  #[serde(rename = "mailruSettings")]
  mailru_settings: Option<String>,
  #[serde(rename = "microsoftSettings")]
  microsoft_settings: Option<String>,
  #[serde(rename = "publicIP")]
  public_ip: Option<String>,
  #[serde(rename = "qqSettings")]
  qq_settings: Option<String>,
  #[serde(rename = "reverseDNSHostname")]
  reverse_dns_hostname: Option<String>,
  #[serde(rename = "systemDomain")]
  system_domain: Option<::models::ModelsSystemDomain>,
  #[serde(rename = "type")]
  _type: Option<::models::ModelsIpType>,
  #[serde(rename = "yahooSettings")]
  yahoo_settings: Option<String>,
  #[serde(rename = "yandexSettings")]
  yandex_settings: Option<String>,
  #[serde(rename = "zohoSettings")]
  zoho_settings: Option<String>
}

impl ModelsIp {
  pub fn new() -> ModelsIp {
    ModelsIp {
      aol_settings: None,
      auto_warmup_enabled: None,
      auto_warmup_stage: None,
      comcast_settings: None,
      created: None,
      default_settings: None,
      gmail_settings: None,
      gmx_settings: None,
      icloud_settings: None,
      id: None,
      mailru_settings: None,
      microsoft_settings: None,
      public_ip: None,
      qq_settings: None,
      reverse_dns_hostname: None,
      system_domain: None,
      _type: None,
      yahoo_settings: None,
      yandex_settings: None,
      zoho_settings: None
    }
  }

  pub fn set_aol_settings(&mut self, aol_settings: String) {
    self.aol_settings = Some(aol_settings);
  }

  pub fn with_aol_settings(mut self, aol_settings: String) -> ModelsIp {
    self.aol_settings = Some(aol_settings);
    self
  }

  pub fn aol_settings(&self) -> Option<&String> {
    self.aol_settings.as_ref()
  }

  pub fn reset_aol_settings(&mut self) {
    self.aol_settings = None;
  }

  pub fn set_auto_warmup_enabled(&mut self, auto_warmup_enabled: bool) {
    self.auto_warmup_enabled = Some(auto_warmup_enabled);
  }

  pub fn with_auto_warmup_enabled(mut self, auto_warmup_enabled: bool) -> ModelsIp {
    self.auto_warmup_enabled = Some(auto_warmup_enabled);
    self
  }

  pub fn auto_warmup_enabled(&self) -> Option<&bool> {
    self.auto_warmup_enabled.as_ref()
  }

  pub fn reset_auto_warmup_enabled(&mut self) {
    self.auto_warmup_enabled = None;
  }

  pub fn set_auto_warmup_stage(&mut self, auto_warmup_stage: i64) {
    self.auto_warmup_stage = Some(auto_warmup_stage);
  }

  pub fn with_auto_warmup_stage(mut self, auto_warmup_stage: i64) -> ModelsIp {
    self.auto_warmup_stage = Some(auto_warmup_stage);
    self
  }

  pub fn auto_warmup_stage(&self) -> Option<&i64> {
    self.auto_warmup_stage.as_ref()
  }

  pub fn reset_auto_warmup_stage(&mut self) {
    self.auto_warmup_stage = None;
  }

  pub fn set_comcast_settings(&mut self, comcast_settings: String) {
    self.comcast_settings = Some(comcast_settings);
  }

  pub fn with_comcast_settings(mut self, comcast_settings: String) -> ModelsIp {
    self.comcast_settings = Some(comcast_settings);
    self
  }

  pub fn comcast_settings(&self) -> Option<&String> {
    self.comcast_settings.as_ref()
  }

  pub fn reset_comcast_settings(&mut self) {
    self.comcast_settings = None;
  }

  pub fn set_created(&mut self, created: i64) {
    self.created = Some(created);
  }

  pub fn with_created(mut self, created: i64) -> ModelsIp {
    self.created = Some(created);
    self
  }

  pub fn created(&self) -> Option<&i64> {
    self.created.as_ref()
  }

  pub fn reset_created(&mut self) {
    self.created = None;
  }

  pub fn set_default_settings(&mut self, default_settings: String) {
    self.default_settings = Some(default_settings);
  }

  pub fn with_default_settings(mut self, default_settings: String) -> ModelsIp {
    self.default_settings = Some(default_settings);
    self
  }

  pub fn default_settings(&self) -> Option<&String> {
    self.default_settings.as_ref()
  }

  pub fn reset_default_settings(&mut self) {
    self.default_settings = None;
  }

  pub fn set_gmail_settings(&mut self, gmail_settings: String) {
    self.gmail_settings = Some(gmail_settings);
  }

  pub fn with_gmail_settings(mut self, gmail_settings: String) -> ModelsIp {
    self.gmail_settings = Some(gmail_settings);
    self
  }

  pub fn gmail_settings(&self) -> Option<&String> {
    self.gmail_settings.as_ref()
  }

  pub fn reset_gmail_settings(&mut self) {
    self.gmail_settings = None;
  }

  pub fn set_gmx_settings(&mut self, gmx_settings: String) {
    self.gmx_settings = Some(gmx_settings);
  }

  pub fn with_gmx_settings(mut self, gmx_settings: String) -> ModelsIp {
    self.gmx_settings = Some(gmx_settings);
    self
  }

  pub fn gmx_settings(&self) -> Option<&String> {
    self.gmx_settings.as_ref()
  }

  pub fn reset_gmx_settings(&mut self) {
    self.gmx_settings = None;
  }

  pub fn set_icloud_settings(&mut self, icloud_settings: String) {
    self.icloud_settings = Some(icloud_settings);
  }

  pub fn with_icloud_settings(mut self, icloud_settings: String) -> ModelsIp {
    self.icloud_settings = Some(icloud_settings);
    self
  }

  pub fn icloud_settings(&self) -> Option<&String> {
    self.icloud_settings.as_ref()
  }

  pub fn reset_icloud_settings(&mut self) {
    self.icloud_settings = None;
  }

  pub fn set_id(&mut self, id: i64) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i64) -> ModelsIp {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i64> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_mailru_settings(&mut self, mailru_settings: String) {
    self.mailru_settings = Some(mailru_settings);
  }

  pub fn with_mailru_settings(mut self, mailru_settings: String) -> ModelsIp {
    self.mailru_settings = Some(mailru_settings);
    self
  }

  pub fn mailru_settings(&self) -> Option<&String> {
    self.mailru_settings.as_ref()
  }

  pub fn reset_mailru_settings(&mut self) {
    self.mailru_settings = None;
  }

  pub fn set_microsoft_settings(&mut self, microsoft_settings: String) {
    self.microsoft_settings = Some(microsoft_settings);
  }

  pub fn with_microsoft_settings(mut self, microsoft_settings: String) -> ModelsIp {
    self.microsoft_settings = Some(microsoft_settings);
    self
  }

  pub fn microsoft_settings(&self) -> Option<&String> {
    self.microsoft_settings.as_ref()
  }

  pub fn reset_microsoft_settings(&mut self) {
    self.microsoft_settings = None;
  }

  pub fn set_public_ip(&mut self, public_ip: String) {
    self.public_ip = Some(public_ip);
  }

  pub fn with_public_ip(mut self, public_ip: String) -> ModelsIp {
    self.public_ip = Some(public_ip);
    self
  }

  pub fn public_ip(&self) -> Option<&String> {
    self.public_ip.as_ref()
  }

  pub fn reset_public_ip(&mut self) {
    self.public_ip = None;
  }

  pub fn set_qq_settings(&mut self, qq_settings: String) {
    self.qq_settings = Some(qq_settings);
  }

  pub fn with_qq_settings(mut self, qq_settings: String) -> ModelsIp {
    self.qq_settings = Some(qq_settings);
    self
  }

  pub fn qq_settings(&self) -> Option<&String> {
    self.qq_settings.as_ref()
  }

  pub fn reset_qq_settings(&mut self) {
    self.qq_settings = None;
  }

  pub fn set_reverse_dns_hostname(&mut self, reverse_dns_hostname: String) {
    self.reverse_dns_hostname = Some(reverse_dns_hostname);
  }

  pub fn with_reverse_dns_hostname(mut self, reverse_dns_hostname: String) -> ModelsIp {
    self.reverse_dns_hostname = Some(reverse_dns_hostname);
    self
  }

  pub fn reverse_dns_hostname(&self) -> Option<&String> {
    self.reverse_dns_hostname.as_ref()
  }

  pub fn reset_reverse_dns_hostname(&mut self) {
    self.reverse_dns_hostname = None;
  }

  pub fn set_system_domain(&mut self, system_domain: ::models::ModelsSystemDomain) {
    self.system_domain = Some(system_domain);
  }

  pub fn with_system_domain(mut self, system_domain: ::models::ModelsSystemDomain) -> ModelsIp {
    self.system_domain = Some(system_domain);
    self
  }

  pub fn system_domain(&self) -> Option<&::models::ModelsSystemDomain> {
    self.system_domain.as_ref()
  }

  pub fn reset_system_domain(&mut self) {
    self.system_domain = None;
  }

  pub fn set__type(&mut self, _type: ::models::ModelsIpType) {
    self._type = Some(_type);
  }

  pub fn with__type(mut self, _type: ::models::ModelsIpType) -> ModelsIp {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> Option<&::models::ModelsIpType> {
    self._type.as_ref()
  }

  pub fn reset__type(&mut self) {
    self._type = None;
  }

  pub fn set_yahoo_settings(&mut self, yahoo_settings: String) {
    self.yahoo_settings = Some(yahoo_settings);
  }

  pub fn with_yahoo_settings(mut self, yahoo_settings: String) -> ModelsIp {
    self.yahoo_settings = Some(yahoo_settings);
    self
  }

  pub fn yahoo_settings(&self) -> Option<&String> {
    self.yahoo_settings.as_ref()
  }

  pub fn reset_yahoo_settings(&mut self) {
    self.yahoo_settings = None;
  }

  pub fn set_yandex_settings(&mut self, yandex_settings: String) {
    self.yandex_settings = Some(yandex_settings);
  }

  pub fn with_yandex_settings(mut self, yandex_settings: String) -> ModelsIp {
    self.yandex_settings = Some(yandex_settings);
    self
  }

  pub fn yandex_settings(&self) -> Option<&String> {
    self.yandex_settings.as_ref()
  }

  pub fn reset_yandex_settings(&mut self) {
    self.yandex_settings = None;
  }

  pub fn set_zoho_settings(&mut self, zoho_settings: String) {
    self.zoho_settings = Some(zoho_settings);
  }

  pub fn with_zoho_settings(mut self, zoho_settings: String) -> ModelsIp {
    self.zoho_settings = Some(zoho_settings);
    self
  }

  pub fn zoho_settings(&self) -> Option<&String> {
    self.zoho_settings.as_ref()
  }

  pub fn reset_zoho_settings(&mut self) {
    self.zoho_settings = None;
  }

}



