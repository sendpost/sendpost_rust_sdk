/* 
 * SendPost API
 *
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ModelsBackOffTrigger {
  #[serde(rename = "deferralPercentage")]
  deferral_percentage: Option<i64>,
  #[serde(rename = "durationInMinutes")]
  duration_in_minutes: Option<i64>,
  #[serde(rename = "hardBouncePercentage")]
  hard_bounce_percentage: Option<i64>,
  #[serde(rename = "minimumAttempts")]
  minimum_attempts: Option<i64>
}

impl ModelsBackOffTrigger {
  pub fn new() -> ModelsBackOffTrigger {
    ModelsBackOffTrigger {
      deferral_percentage: None,
      duration_in_minutes: None,
      hard_bounce_percentage: None,
      minimum_attempts: None
    }
  }

  pub fn set_deferral_percentage(&mut self, deferral_percentage: i64) {
    self.deferral_percentage = Some(deferral_percentage);
  }

  pub fn with_deferral_percentage(mut self, deferral_percentage: i64) -> ModelsBackOffTrigger {
    self.deferral_percentage = Some(deferral_percentage);
    self
  }

  pub fn deferral_percentage(&self) -> Option<&i64> {
    self.deferral_percentage.as_ref()
  }

  pub fn reset_deferral_percentage(&mut self) {
    self.deferral_percentage = None;
  }

  pub fn set_duration_in_minutes(&mut self, duration_in_minutes: i64) {
    self.duration_in_minutes = Some(duration_in_minutes);
  }

  pub fn with_duration_in_minutes(mut self, duration_in_minutes: i64) -> ModelsBackOffTrigger {
    self.duration_in_minutes = Some(duration_in_minutes);
    self
  }

  pub fn duration_in_minutes(&self) -> Option<&i64> {
    self.duration_in_minutes.as_ref()
  }

  pub fn reset_duration_in_minutes(&mut self) {
    self.duration_in_minutes = None;
  }

  pub fn set_hard_bounce_percentage(&mut self, hard_bounce_percentage: i64) {
    self.hard_bounce_percentage = Some(hard_bounce_percentage);
  }

  pub fn with_hard_bounce_percentage(mut self, hard_bounce_percentage: i64) -> ModelsBackOffTrigger {
    self.hard_bounce_percentage = Some(hard_bounce_percentage);
    self
  }

  pub fn hard_bounce_percentage(&self) -> Option<&i64> {
    self.hard_bounce_percentage.as_ref()
  }

  pub fn reset_hard_bounce_percentage(&mut self) {
    self.hard_bounce_percentage = None;
  }

  pub fn set_minimum_attempts(&mut self, minimum_attempts: i64) {
    self.minimum_attempts = Some(minimum_attempts);
  }

  pub fn with_minimum_attempts(mut self, minimum_attempts: i64) -> ModelsBackOffTrigger {
    self.minimum_attempts = Some(minimum_attempts);
    self
  }

  pub fn minimum_attempts(&self) -> Option<&i64> {
    self.minimum_attempts.as_ref()
  }

  pub fn reset_minimum_attempts(&mut self) {
    self.minimum_attempts = None;
  }

}



