/* 
 * SendPost API
 *
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ModelsSystemIpPool {
  #[serde(rename = "IPs")]
  i_ps: Option<Vec<::models::ModelsIp>>,
  #[serde(rename = "created")]
  created: Option<i64>,
  #[serde(rename = "id")]
  id: Option<i64>,
  #[serde(rename = "name")]
  name: Option<String>
}

impl ModelsSystemIpPool {
  pub fn new() -> ModelsSystemIpPool {
    ModelsSystemIpPool {
      i_ps: None,
      created: None,
      id: None,
      name: None
    }
  }

  pub fn set_i_ps(&mut self, i_ps: Vec<::models::ModelsIp>) {
    self.i_ps = Some(i_ps);
  }

  pub fn with_i_ps(mut self, i_ps: Vec<::models::ModelsIp>) -> ModelsSystemIpPool {
    self.i_ps = Some(i_ps);
    self
  }

  pub fn i_ps(&self) -> Option<&Vec<::models::ModelsIp>> {
    self.i_ps.as_ref()
  }

  pub fn reset_i_ps(&mut self) {
    self.i_ps = None;
  }

  pub fn set_created(&mut self, created: i64) {
    self.created = Some(created);
  }

  pub fn with_created(mut self, created: i64) -> ModelsSystemIpPool {
    self.created = Some(created);
    self
  }

  pub fn created(&self) -> Option<&i64> {
    self.created.as_ref()
  }

  pub fn reset_created(&mut self) {
    self.created = None;
  }

  pub fn set_id(&mut self, id: i64) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i64) -> ModelsSystemIpPool {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i64> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> ModelsSystemIpPool {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

}



