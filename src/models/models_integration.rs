/* 
 * SendPost API
 *
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ModelsIntegration {
  #[serde(rename = "created")]
  created: Option<i64>,
  #[serde(rename = "id")]
  id: Option<i64>,
  #[serde(rename = "key")]
  key: Option<String>,
  #[serde(rename = "settings")]
  settings: Option<String>,
  #[serde(rename = "type")]
  _type: Option<::models::ModelsIntegrationType>
}

impl ModelsIntegration {
  pub fn new() -> ModelsIntegration {
    ModelsIntegration {
      created: None,
      id: None,
      key: None,
      settings: None,
      _type: None
    }
  }

  pub fn set_created(&mut self, created: i64) {
    self.created = Some(created);
  }

  pub fn with_created(mut self, created: i64) -> ModelsIntegration {
    self.created = Some(created);
    self
  }

  pub fn created(&self) -> Option<&i64> {
    self.created.as_ref()
  }

  pub fn reset_created(&mut self) {
    self.created = None;
  }

  pub fn set_id(&mut self, id: i64) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i64) -> ModelsIntegration {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i64> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_key(&mut self, key: String) {
    self.key = Some(key);
  }

  pub fn with_key(mut self, key: String) -> ModelsIntegration {
    self.key = Some(key);
    self
  }

  pub fn key(&self) -> Option<&String> {
    self.key.as_ref()
  }

  pub fn reset_key(&mut self) {
    self.key = None;
  }

  pub fn set_settings(&mut self, settings: String) {
    self.settings = Some(settings);
  }

  pub fn with_settings(mut self, settings: String) -> ModelsIntegration {
    self.settings = Some(settings);
    self
  }

  pub fn settings(&self) -> Option<&String> {
    self.settings.as_ref()
  }

  pub fn reset_settings(&mut self) {
    self.settings = None;
  }

  pub fn set__type(&mut self, _type: ::models::ModelsIntegrationType) {
    self._type = Some(_type);
  }

  pub fn with__type(mut self, _type: ::models::ModelsIntegrationType) -> ModelsIntegration {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> Option<&::models::ModelsIntegrationType> {
    self._type.as_ref()
  }

  pub fn reset__type(&mut self) {
    self._type = None;
  }

}



