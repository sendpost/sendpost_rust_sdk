/* 
 * SendPost API
 *
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ModelsSystemTemplate {
  #[serde(rename = "html")]
  html: Option<String>,
  #[serde(rename = "id")]
  id: Option<i64>,
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "template")]
  template: Option<String>,
  #[serde(rename = "text")]
  text: Option<String>
}

impl ModelsSystemTemplate {
  pub fn new() -> ModelsSystemTemplate {
    ModelsSystemTemplate {
      html: None,
      id: None,
      name: None,
      template: None,
      text: None
    }
  }

  pub fn set_html(&mut self, html: String) {
    self.html = Some(html);
  }

  pub fn with_html(mut self, html: String) -> ModelsSystemTemplate {
    self.html = Some(html);
    self
  }

  pub fn html(&self) -> Option<&String> {
    self.html.as_ref()
  }

  pub fn reset_html(&mut self) {
    self.html = None;
  }

  pub fn set_id(&mut self, id: i64) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i64) -> ModelsSystemTemplate {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i64> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> ModelsSystemTemplate {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_template(&mut self, template: String) {
    self.template = Some(template);
  }

  pub fn with_template(mut self, template: String) -> ModelsSystemTemplate {
    self.template = Some(template);
    self
  }

  pub fn template(&self) -> Option<&String> {
    self.template.as_ref()
  }

  pub fn reset_template(&mut self) {
    self.template = None;
  }

  pub fn set_text(&mut self, text: String) {
    self.text = Some(text);
  }

  pub fn with_text(mut self, text: String) -> ModelsSystemTemplate {
    self.text = Some(text);
    self
  }

  pub fn text(&self) -> Option<&String> {
    self.text.as_ref()
  }

  pub fn reset_text(&mut self) {
    self.text = None;
  }

}



