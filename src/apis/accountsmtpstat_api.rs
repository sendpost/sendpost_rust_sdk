/* 
 * SendPost API
 *
 * SendPost API to send transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use std::rc::Rc;
use std::borrow::Borrow;
use std::borrow::Cow;
use std::collections::HashMap;

use hyper;
use serde_json;
use futures;
use futures::{Future, Stream};

use hyper::header::UserAgent;

use super::{Error, configuration};

pub struct AccountsmtpstatApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> AccountsmtpstatApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> AccountsmtpstatApiClient<C> {
        AccountsmtpstatApiClient {
            configuration: configuration,
        }
    }
}

pub trait AccountsmtpstatApi {
    fn s_mtp_stat_router_get_all_aggregate_ip_provider_smtp_stats(&self, x_account_api_key: &str, ipid: i64, pname: &str, from: &str, to: &str) -> Box<Future<Item = Vec<::models::ModelsSmtpStat>, Error = Error<serde_json::Value>>>;
    fn s_mtp_stat_router_get_all_aggregate_ip_smtp_stats(&self, x_account_api_key: &str, ipid: i64, from: &str, to: &str) -> Box<Future<Item = Vec<::models::ModelsSmtpStat>, Error = Error<serde_json::Value>>>;
    fn s_mtp_stat_router_get_all_aggregate_ip_smtp_stats_for_sub_account(&self, x_account_api_key: &str, ipid: i64, sid: i64, from: &str, to: &str) -> Box<Future<Item = Vec<::models::ModelsSmtpStat>, Error = Error<serde_json::Value>>>;
    fn s_mtp_stat_router_get_all_aggregate_sub_account_provider_smtp_stats(&self, x_account_api_key: &str, sid: i64, pname: &str, from: &str, to: &str) -> Box<Future<Item = Vec<::models::ModelsSmtpStat>, Error = Error<serde_json::Value>>>;
    fn s_mtp_stat_router_get_all_aggregate_sub_account_smtp_stats(&self, x_account_api_key: &str, sid: i64, from: &str, to: &str) -> Box<Future<Item = Vec<::models::ModelsSmtpStat>, Error = Error<serde_json::Value>>>;
    fn s_mtp_stat_router_get_all_aggregate_sub_account_smtp_stats_for_ip(&self, x_account_api_key: &str, sid: i64, ipid: i64, from: &str, to: &str) -> Box<Future<Item = Vec<::models::ModelsSmtpStat>, Error = Error<serde_json::Value>>>;
}


impl<C: hyper::client::Connect>AccountsmtpstatApi for AccountsmtpstatApiClient<C> {
    fn s_mtp_stat_router_get_all_aggregate_ip_provider_smtp_stats(&self, x_account_api_key: &str, ipid: i64, pname: &str, from: &str, to: &str) -> Box<Future<Item = Vec<::models::ModelsSmtpStat>, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("from", &from.to_string());
            query.append_pair("to", &to.to_string());
            query.finish()
        };
        let uri_str = format!("{}/account/smtp/stat/ip/{ipid}/provider/{pname}/aggregate?{}", configuration.base_path, query_string, ipid=ipid, pname=pname);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }

        {
            let mut headers = req.headers_mut();
            headers.set_raw("X-Account-ApiKey", x_account_api_key);
        }



        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<Vec<::models::ModelsSmtpStat>, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn s_mtp_stat_router_get_all_aggregate_ip_smtp_stats(&self, x_account_api_key: &str, ipid: i64, from: &str, to: &str) -> Box<Future<Item = Vec<::models::ModelsSmtpStat>, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("from", &from.to_string());
            query.append_pair("to", &to.to_string());
            query.finish()
        };
        let uri_str = format!("{}/account/smtp/stat/ip/{ipid}/aggregate?{}", configuration.base_path, query_string, ipid=ipid);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }

        {
            let mut headers = req.headers_mut();
            headers.set_raw("X-Account-ApiKey", x_account_api_key);
        }



        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<Vec<::models::ModelsSmtpStat>, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn s_mtp_stat_router_get_all_aggregate_ip_smtp_stats_for_sub_account(&self, x_account_api_key: &str, ipid: i64, sid: i64, from: &str, to: &str) -> Box<Future<Item = Vec<::models::ModelsSmtpStat>, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("from", &from.to_string());
            query.append_pair("to", &to.to_string());
            query.finish()
        };
        let uri_str = format!("{}/account/smtp/stat/ip/{ipid}/subaccount/{sid}/aggregate?{}", configuration.base_path, query_string, ipid=ipid, sid=sid);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }

        {
            let mut headers = req.headers_mut();
            headers.set_raw("X-Account-ApiKey", x_account_api_key);
        }



        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<Vec<::models::ModelsSmtpStat>, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn s_mtp_stat_router_get_all_aggregate_sub_account_provider_smtp_stats(&self, x_account_api_key: &str, sid: i64, pname: &str, from: &str, to: &str) -> Box<Future<Item = Vec<::models::ModelsSmtpStat>, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("from", &from.to_string());
            query.append_pair("to", &to.to_string());
            query.finish()
        };
        let uri_str = format!("{}/account/smtp/stat/subaccount/{sid}/provider/{pname}/aggregate?{}", configuration.base_path, query_string, sid=sid, pname=pname);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }

        {
            let mut headers = req.headers_mut();
            headers.set_raw("X-Account-ApiKey", x_account_api_key);
        }



        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<Vec<::models::ModelsSmtpStat>, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn s_mtp_stat_router_get_all_aggregate_sub_account_smtp_stats(&self, x_account_api_key: &str, sid: i64, from: &str, to: &str) -> Box<Future<Item = Vec<::models::ModelsSmtpStat>, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("from", &from.to_string());
            query.append_pair("to", &to.to_string());
            query.finish()
        };
        let uri_str = format!("{}/account/smtp/stat/subaccount/{sid}/aggregate?{}", configuration.base_path, query_string, sid=sid);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }

        {
            let mut headers = req.headers_mut();
            headers.set_raw("X-Account-ApiKey", x_account_api_key);
        }



        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<Vec<::models::ModelsSmtpStat>, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn s_mtp_stat_router_get_all_aggregate_sub_account_smtp_stats_for_ip(&self, x_account_api_key: &str, sid: i64, ipid: i64, from: &str, to: &str) -> Box<Future<Item = Vec<::models::ModelsSmtpStat>, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("from", &from.to_string());
            query.append_pair("to", &to.to_string());
            query.finish()
        };
        let uri_str = format!("{}/account/smtp/stat/subaccount/{sid}/ip/{ipid}/aggregate?{}", configuration.base_path, query_string, sid=sid, ipid=ipid);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }

        {
            let mut headers = req.headers_mut();
            headers.set_raw("X-Account-ApiKey", x_account_api_key);
        }



        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<Vec<::models::ModelsSmtpStat>, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

}
